{"ast":null,"code":"var _jsxFileName = \"/Users/nithin.reddy/Documents/react/myapp/src/components/game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { updateScore, loadLeaderboards } from '../actions/useraction';\nimport { Field, reduxForm } from 'redux-form';\n\nclass GameConatiner extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.player = {\n      leaderboardId: \"\",\n      score: \"\"\n    };\n\n    this.changeHandler = event => {\n      event.preventDefault();\n      let key = event.target.name;\n      let val = event.target.value;\n      console.log(\"changeHandler\", key, val);\n      this.player[key] = val;\n    };\n\n    this.submitHandler = async event => {\n      event.preventDefault();\n      let random = Math.round(Math.random()) * 10 + Math.round(Math.random()) * 20;\n      this.player.score = random;\n      this.props.updateScore(this.player.leaderboardId, this.props.username, random);\n    };\n  }\n\n  componentDidMount() {\n    this.props.loadLeaderboards();\n  }\n\n  getSelectField({\n    select,\n    label\n  }) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, label), /*#__PURE__*/React.createElement(\"select\", Object.assign({}, select, {\n      onChange: this.changeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }), this.props.leaderboards != null && this.props.leaderboards.map(lb => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: lb,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 24\n        }\n      }, lb);\n    })));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"leaderboardId\",\n      component: this.getSelectField,\n      label: \"leaderboardId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, \"Press to update score\")), this.props.errorMessage != \"\" ? this.props.errorMessage : \"\", \"Your current game score : \", this.props.score);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.user.username,\n    leaderboards: state.leaderboards,\n    score: state.score,\n    errorMessage: state.errorMessage\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateScore,\n  loadLeaderboards\n})(GameConatiner);","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/react/myapp/src/components/game.js"],"names":["React","connect","updateScore","loadLeaderboards","Field","reduxForm","GameConatiner","Component","player","leaderboardId","score","changeHandler","event","preventDefault","key","target","name","val","value","console","log","submitHandler","random","Math","round","props","username","componentDidMount","getSelectField","select","label","leaderboards","map","lb","render","errorMessage","mapStateToProps","state","user"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport { updateScore, loadLeaderboards} from '../actions/useraction'\nimport { Field, reduxForm} from 'redux-form'\n\nclass GameConatiner extends React.Component{\n\n    player = {leaderboardId :\"\", score:\"\"}\n\n    componentDidMount(){\n        this.props.loadLeaderboards();\n    }\n    \n    changeHandler = (event) => {\n        event.preventDefault()\n        let key = event.target.name\n        let val = event.target.value\n        console.log(\"changeHandler\",key,val)\n        this.player[key] = val\n    }\n\n    submitHandler = async (event) => {\n        event.preventDefault()\n        let random = (Math.round(Math.random()) * 10) + (Math.round(Math.random()) * 20)\n        this.player.score = random;\n        this.props.updateScore(this.player.leaderboardId,this.props.username,random)\n    }\n\n    getSelectField({select, label}){\n        return <div>\n        <label>{label}</label>\n        <select {...select} onChange={this.changeHandler}>\n        {\n            this.props.leaderboards != null && this.props.leaderboards.map((lb) => {\n                return <option key={lb}>{lb}</option>\n            })\n        }\n        </select>\n        </div>\n        \n    }\n\n    render(){\n        return <div>\n            <form onSubmit={this.submitHandler}>\n                <Field name=\"leaderboardId\" component={this.getSelectField} label=\"leaderboardId\"/>\n                <button type=\"submit\">Press to update score</button>\n            </form>\n            { this.props.errorMessage != \"\" ? this.props.errorMessage : \"\"}\n            Your current game score : {this.props.score}\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        leaderboards : state.leaderboards,\n        score : state.score,\n        errorMessage : state.errorMessage\n    }\n}\n\nexport default connect(mapStateToProps,{updateScore,loadLeaderboards})(GameConatiner)"]},"metadata":{},"sourceType":"module"}