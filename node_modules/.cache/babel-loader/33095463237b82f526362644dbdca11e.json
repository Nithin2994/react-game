{"ast":null,"code":"import _classCallCheck from\"/Users/nithin.reddy/Documents/GitHub/react-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/nithin.reddy/Documents/GitHub/react-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/nithin.reddy/Documents/GitHub/react-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/nithin.reddy/Documents/GitHub/react-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{Field,reduxForm}from'redux-form';import{Form,Button,Jumbotron}from'react-bootstrap';var TransactionForm=/*#__PURE__*/function(_React$Component){_inherits(TransactionForm,_React$Component);var _super=_createSuper(TransactionForm);function TransactionForm(){var _this;_classCallCheck(this,TransactionForm);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.transact=function(formValues){console.log(formValues);_this.props.transaction(formValues.type,formValues.currency,formValues.amount);};return _this;}_createClass(TransactionForm,[{key:\"renderInput\",value:function renderInput(_ref){var input=_ref.input,type=_ref.type,name=_ref.name,lable=_ref.lable,meta=_ref.meta;return/*#__PURE__*/React.createElement(Form.Group,{controlId:lable},/*#__PURE__*/React.createElement(Form.Label,null,lable),/*#__PURE__*/React.createElement(Form.Control,Object.assign({},input,{type:type,name:name})),/*#__PURE__*/React.createElement(Form.Text,null,meta.touched&&meta.error?/*#__PURE__*/React.createElement(\"div\",{style:{color:\"red\"}},meta.error):\"\",\" \"));}},{key:\"renderSelect\",value:function renderSelect(field){return/*#__PURE__*/React.createElement(Form.Group,{controlId:field.lable},/*#__PURE__*/React.createElement(Form.Label,null,field.lable),/*#__PURE__*/React.createElement(Form.Control,Object.assign({as:\"select\"},field.input,{name:field.name}),field.children),/*#__PURE__*/React.createElement(Form.Text,null,field.meta.error?/*#__PURE__*/React.createElement(\"div\",{style:{color:\"red\"}},field.meta.error):\"\",\" \"));}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(Jumbotron,{style:{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}},/*#__PURE__*/React.createElement(\"h3\",null,\"Transaction Form\"),/*#__PURE__*/React.createElement(Form,{onSubmit:this.props.handleSubmit(this.transact)},/*#__PURE__*/React.createElement(Field,{name:\"amount\",lable:\"Amount\",component:this.renderInput,type:\"number\"}),/*#__PURE__*/React.createElement(Field,{name:\"currency\",lable:\"Currency\",component:this.renderSelect},/*#__PURE__*/React.createElement(\"option\",{value:\"NA\"},\"-select-\"),this.props.currencies!=null&&this.props.currencies.map(function(currency){return/*#__PURE__*/React.createElement(\"option\",{value:currency},currency);})),/*#__PURE__*/React.createElement(Field,{name:\"type\",lable:\"TransactionType\",component:this.renderSelect},/*#__PURE__*/React.createElement(\"option\",{value:\"NA\"},\"-select-\"),/*#__PURE__*/React.createElement(\"option\",{value:\"debit\"},\"debit\"),/*#__PURE__*/React.createElement(\"option\",{value:\"credit\"},\"credit\")),/*#__PURE__*/React.createElement(Button,{variant:\"light\",block:true,type:\"submit\"},\"Submit\")));}}]);return TransactionForm;}(React.Component);var validate=function validate(formValues){var errors={};if(!formValues.currency){errors.currency=\"Select currency\";}else if(!formValues.type){errors.type=\"Select type\";}else if(!formValues.amount||formValues.amount<0){errors.amount=\"Enter amount greater than 0\";}return errors;};export default reduxForm({form:'Transaction',validate:validate})(TransactionForm);","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/GitHub/react-game/src/components/transactionFormComponent.js"],"names":["React","Field","reduxForm","Form","Button","Jumbotron","TransactionForm","transact","formValues","console","log","props","transaction","type","currency","amount","input","name","lable","meta","touched","error","color","field","children","backgroundColor","border","handleSubmit","renderInput","renderSelect","currencies","map","Component","validate","errors","form"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Field, reduxForm} from 'redux-form'\nimport {Form, Button, Jumbotron} from 'react-bootstrap'\n\nclass TransactionForm extends React.Component{\n\n    renderInput({input,type,name,lable,meta}){\n        return <Form.Group controlId={lable}>\n            <Form.Label>{lable}</Form.Label>\n            <Form.Control {...input} type={type} name={name}/>\n            <Form.Text>{( meta.touched && meta.error )? <div style={{color:\"red\"}}>{meta.error}</div> : \"\" } </Form.Text>\n        </Form.Group>\n    }\n\n    renderSelect(field){\n        return <Form.Group controlId={field.lable}>\n            <Form.Label>{field.lable}</Form.Label>\n            <Form.Control as=\"select\" {...field.input} name={field.name}>\n                {field.children}\n            </Form.Control>\n            <Form.Text>{( field.meta.error )? <div style={{color:\"red\"}}>{field.meta.error}</div> : \"\" } </Form.Text>\n            </Form.Group>\n    }\n\n    transact = (formValues) => {\n        console.log(formValues)\n        this.props.transaction(formValues.type,formValues.currency,formValues.amount);\n    }\n\n    render(){\n        return <Jumbotron style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}}>\n            <h3>Transaction Form</h3>\n         <Form onSubmit={this.props.handleSubmit(this.transact)}>\n            <Field name=\"amount\" lable=\"Amount\" component={this.renderInput} type=\"number\"></Field>\n            <Field name=\"currency\" lable=\"Currency\" component={this.renderSelect} >\n                <option value=\"NA\">-select-</option>\n                {\n                this.props.currencies != null  && this.props.currencies.map((currency)=>{\n                    return <option value={currency}>{currency}</option>\n                })\n                }\n            </Field>\n            <Field name=\"type\" lable=\"TransactionType\" component={this.renderSelect}>\n                    <option value=\"NA\">-select-</option>\n                    <option value=\"debit\">debit</option>\n                    <option value=\"credit\">credit</option>\n            </Field>\n            <Button variant=\"light\" block type=\"submit\">Submit</Button>\n            </Form>\n            </Jumbotron>\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {}\n\n    if(!formValues.currency){\n        errors.currency = \"Select currency\"\n    }else if(!formValues.type){\n        errors.type = \"Select type\"\n    }else if(!formValues.amount || formValues.amount < 0){\n        errors.amount = \"Enter amount greater than 0\"\n    }\n    return errors\n}\n\nexport default reduxForm({\n    form : 'Transaction',\n    validate\n})(TransactionForm)"]},"metadata":{},"sourceType":"module"}