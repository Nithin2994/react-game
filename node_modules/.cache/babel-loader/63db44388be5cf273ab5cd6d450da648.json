{"ast":null,"code":"var _jsxFileName = \"/Users/nithin.reddy/Documents/react/myapp/src/components/tiktoktoe.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { updatePvpScore, endGame, updateScoresInState } from '../actions/useraction';\nimport histroy from '../history';\nimport { Button, Table, Row, Col, Card, Container } from 'react-bootstrap';\nimport Cell from './cell';\nimport gameserver from '../apis/gameserver';\n\nclass PVPTikTokToeGame extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      seconds: 60,\n      selectedData: {},\n      myTurn: true,\n      winner: \"\"\n    };\n\n    this.updateCache = e => {\n      var msg = JSON.parse(e.data);\n      console.log(\"Received \", msg);\n      this.updateGridVals(msg);\n      this.setState({\n        myTurn: true\n      });\n    };\n\n    this.updateGridVals = msg => {\n      var updatedValues = { ...this.state.selectedData\n      };\n      updatedValues[msg.id] = msg.player;\n      this.setState({\n        selectedData: updatedValues\n      });\n\n      if (this.state.selectedData[1] == this.state.selectedData[2]) {\n        if (this.state.selectedData[2] == this.state.selectedData[3]) {}\n      }\n    };\n\n    this.endGameHandler = () => {\n      this.props.endGame();\n    };\n\n    this.submitHandler = () => {\n      let random = Math.round(Math.random()) * 10 + Math.round(Math.random()) * 20;\n      this.props.updatePvpScore(random);\n    };\n\n    this.selectCellHandler = async id => {\n      if (this.state.myTurn) {\n        console.log(\"Selected : \", id);\n        const response = await gameserver.post(\"/matchmaking/tiktoktoe\", {\n          player: this.props.username,\n          id: id\n        });\n\n        if (response) {\n          this.updateGridVals({\n            player: this.props.username,\n            id: id\n          });\n        }\n\n        this.setState({\n          myTurn: false\n        });\n      }\n    };\n\n    this.renderGameGrid = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }), [1, 2, 3].map(id => {\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: id,\n          style: {\n            width: \"5%\"\n          },\n          id: id,\n          selected: this.state.selectedData[id],\n          selectCell: this.selectCellHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 24\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }), [4, 5, 6].map(id => {\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: id,\n          style: {\n            width: \"5%\"\n          },\n          id: id,\n          selected: this.state.selectedData[id],\n          selectCell: this.selectCellHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 28\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }), [7, 8, 9].map(id => {\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: id,\n          style: {\n            width: \"5%\"\n          },\n          id: id,\n          selected: this.state.selectedData[id],\n          selectCell: this.selectCellHandler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 28\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }))));\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          paddingBottom: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        onClick: () => {\n          histroy.push(\"/home\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }\n      }, \"back\"))), /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }\n      }, \"TikTokToe \", this.props.pvp.gameId), /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }\n      }, this.state.myTurn ? \"Your Turn\" : \"Opponent Turn\")), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }, this.renderGameGrid())));\n    };\n  }\n\n  componentDidMount() {\n    this.ws = new WebSocket('ws://localhost:8081/ws');\n\n    this.ws.onopen = () => this.ws.send(JSON.stringify({\n      gameId: \"TikTokToe\",\n      isJoin: \"true\",\n      Player: this.props.username\n    }));\n\n    this.ws.addEventListener(\"message\", this.updateCache);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.user.username,\n    pvp: state.pvp\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updatePvpScore,\n  endGame,\n  updateScoresInState\n})(PVPTikTokToeGame);","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/react/myapp/src/components/tiktoktoe.js"],"names":["React","connect","updatePvpScore","endGame","updateScoresInState","histroy","Button","Table","Row","Col","Card","Container","Cell","gameserver","PVPTikTokToeGame","Component","state","seconds","selectedData","myTurn","winner","updateCache","e","msg","JSON","parse","data","console","log","updateGridVals","setState","updatedValues","id","player","endGameHandler","props","submitHandler","random","Math","round","selectCellHandler","response","post","username","renderGameGrid","map","width","render","paddingBottom","backgroundColor","border","push","pvp","gameId","componentDidMount","ws","WebSocket","onopen","send","stringify","isJoin","Player","addEventListener","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport {updatePvpScore, endGame, updateScoresInState} from '../actions/useraction'\nimport histroy from '../history'\nimport {Button, Table, Row, Col, Card, Container} from 'react-bootstrap'\nimport Cell from './cell'\nimport gameserver from '../apis/gameserver'\n\nclass PVPTikTokToeGame extends React.Component{\n\n    state = {\n        seconds : 60,\n        selectedData : {},\n        myTurn : true,\n        winner : \"\"\n    }\n\n    \n\n    componentDidMount(){\n\n        this.ws = new WebSocket('ws://localhost:8081/ws');\n        this.ws.onopen = () => this.ws.send(JSON.stringify({\n            gameId : \"TikTokToe\",\n            isJoin : \"true\",\n            Player : this.props.username\n        }));\n\n        this.ws.addEventListener(\"message\", this.updateCache)\n    }\n\n    updateCache = (e) => {\n        var msg = JSON.parse(e.data);\n        console.log(\"Received \",msg)\n        this.updateGridVals(msg)\n        this.setState({\n            myTurn : true\n        })\n    }\n\n    updateGridVals = (msg) => {\n        var updatedValues = {...this.state.selectedData}\n        updatedValues[msg.id] = msg.player\n        this.setState({\n            selectedData : updatedValues\n        })\n\n        if(this.state.selectedData[1] == this.state.selectedData[2]){\n            if(this.state.selectedData[2] == this.state.selectedData[3]){\n\n            }\n        }\n        \n    }\n\n    endGameHandler = () =>{\n        this.props.endGame()\n    }\n\n    submitHandler = () => {\n        let random = (Math.round(Math.random()) * 10) + (Math.round(Math.random()) * 20)\n        this.props.updatePvpScore(random);\n    }\n\n    selectCellHandler = async (id) =>{\n        if(this.state.myTurn){\n            console.log(\"Selected : \",id)\n            const response = await gameserver.post(\"/matchmaking/tiktoktoe\",{\n                player : this.props.username,\n                id:id\n            })\n    \n            if(response){\n                this.updateGridVals({\n                    player : this.props.username,\n                    id : id\n                })\n            }\n\n            this.setState({\n                myTurn : false\n            })\n        }\n    }\n\n    renderGameGrid = () => {\n\n        return <div>\n            <Container>\n            <Row>\n                <Col></Col>\n                <Col></Col>\n                <Col></Col>\n                {[1,2,3].map((id) =>{\n                return <Cell key={id} style={{width:\"5%\"}} id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler}/>\n                })}\n                <Col></Col>\n                <Col></Col>\n                <Col></Col>\n            </Row>\n            <Row>\n                <Col></Col>\n                <Col></Col>\n                <Col></Col>\n                {[4,5,6].map(id =>{\n                    return <Cell key={id} style={{width:\"5%\"}}  id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler}/>\n                })}\n                <Col></Col>\n                <Col></Col>\n                <Col></Col>\n            </Row>\n            <Row>\n                <Col></Col>\n                <Col></Col>\n                <Col></Col>\n                {[7,8,9].map(id =>{\n                    return <Cell key={id} style={{width:\"5%\"}}  id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler}/>\n                })}\n                <Col></Col>\n                <Col></Col>\n                <Col></Col>\n            </Row>\n            </Container>\n        </div>\n    }\n\n   \n    render = () => {\n        return <div>\n            <Row style={{paddingBottom:\"1%\"}}>\n                <Col>\n                    <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n            </Row>\n            <Card>\n            <Card.Header>\n            <h2>TikTokToe {this.props.pvp.gameId}</h2>\n            <h3>{this.state.myTurn ? \"Your Turn\":\"Opponent Turn\"}</h3>\n            </Card.Header>\n            <Card.Body>\n                {this.renderGameGrid()}\n            </Card.Body>\n            </Card>\n        </div>\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        pvp : state.pvp\n    }\n}\n\nexport default connect(mapStateToProps,{updatePvpScore,endGame,updateScoresInState})(PVPTikTokToeGame);"]},"metadata":{},"sourceType":"module"}