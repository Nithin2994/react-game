{"ast":null,"code":"var _jsxFileName = \"/Users/nithin.reddy/Documents/react/myapp/src/components/pvpGame.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { updatePvpScore, endGame, updateScoresInState } from '../actions/useraction';\nimport histroy from '../history';\nimport { Button, Jumbotron, Row, Col, Card } from 'react-bootstrap';\n\nclass PVPGame extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      seconds: 20\n    };\n\n    this.updateCache = e => {\n      var msg = JSON.parse(e.data);\n      console.log(\"Updated\", msg);\n      this.props.updateScoresInState(msg);\n    };\n\n    this.endGameHandler = () => {\n      this.props.endGame();\n    };\n\n    this.submitHandler = () => {\n      let random = Math.round(Math.random()) * 10 + Math.round(Math.random()) * 20;\n      this.props.updatePvpScore(random);\n    };\n\n    this.renderGame = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          paddingBottom: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        onClick: () => {\n          histroy.push(\"/home\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }, \"back\")), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        style: {\n          backgroundColor: \"#d6b84d\",\n          border: \"#d6b84d\"\n        },\n        onClick: () => {\n          histroy.push(\"/pvp/highscore\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }\n      }, \"New-Match\"))), /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        style: {\n          color: \"white\",\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }\n      }, \"Game Id : \", this.props.pvp.gameId), /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }\n      }, \"Time : \", this.state.seconds)), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"/images/user.png\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }\n      }, this.props.username), /*#__PURE__*/React.createElement(Card.Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 36\n        }\n      }, \"Score  \", this.props.pvpScores[this.props.username])), /*#__PURE__*/React.createElement(Button, {\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        onClick: this.submitHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }\n      }, \"Play\")))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"/images/user.png\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }\n      }, this.props.pvp.opponent), /*#__PURE__*/React.createElement(Card.Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 36\n        }\n      }, \"Score  \", this.props.pvpScores[this.props.pvp.opponent])))))))));\n    };\n\n    this.renderWinner = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          paddingBottom: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        onClick: () => {\n          histroy.push(\"/home\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }\n      }, \"back\"))), /*#__PURE__*/React.createElement(Card, {\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }, \"Congratulations \", this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.opponent : this.props.username, \"  \")), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"/images/user.png\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          padding: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        text: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }\n      }, \"SCORE\"), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }\n      }, this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username]))))), /*#__PURE__*/React.createElement(Row, {\n        style: {\n          padding: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        text: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }\n      }, \"LEVEL\"), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }\n      }, this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username]))))), /*#__PURE__*/React.createElement(Row, {\n        style: {\n          padding: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        text: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, \"REWARDS\"), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }\n      }, this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username]))))))))));\n    };\n  }\n\n  componentDidMount() {\n    this.ws = new WebSocket('ws://localhost:8081/ws');\n\n    this.ws.onopen = () => this.ws.send(JSON.stringify({\n      gameId: this.props.pvp.gameId,\n      isJoin: \"true\",\n      Player: this.props.username\n    }));\n\n    this.ws.addEventListener(\"message\", this.updateCache);\n    setInterval(() => {\n      this.setState({\n        seconds: this.state.seconds - 1\n      });\n    }, 1000);\n    setTimeout(this.endGameHandler, 20000);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 16\n      }\n    }, this.props.pvp && this.props.pvp.gameStatus != \"Finished\" ? this.renderGame() : this.renderWinner());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.user.username,\n    pvp: state.pvp,\n    pvpScores: state.pvpScores\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updatePvpScore,\n  endGame,\n  updateScoresInState\n})(PVPGame);","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/react/myapp/src/components/pvpGame.js"],"names":["React","connect","updatePvpScore","endGame","updateScoresInState","histroy","Button","Jumbotron","Row","Col","Card","PVPGame","Component","state","seconds","updateCache","e","msg","JSON","parse","data","console","log","props","endGameHandler","submitHandler","random","Math","round","renderGame","paddingBottom","backgroundColor","border","push","color","pvp","gameId","username","pvpScores","opponent","renderWinner","winner","padding","componentDidMount","ws","WebSocket","onopen","send","stringify","isJoin","Player","addEventListener","setInterval","setState","setTimeout","render","gameStatus","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport {updatePvpScore, endGame, updateScoresInState} from '../actions/useraction'\nimport histroy from '../history'\nimport {Button, Jumbotron, Row, Col, Card} from 'react-bootstrap'\n\nclass PVPGame extends React.Component{\n\n    state = {seconds : 20}\n\n    componentDidMount(){\n\n        this.ws = new WebSocket('ws://localhost:8081/ws');\n        this.ws.onopen = () => this.ws.send(JSON.stringify({\n            gameId : this.props.pvp.gameId,\n            isJoin : \"true\",\n            Player : this.props.username\n        }));\n\n        this.ws.addEventListener(\"message\", this.updateCache)\n\n        setInterval(\n            ()=>{ this.setState({\n                seconds : this.state.seconds - 1\n            })},1000\n        )\n        setTimeout(\n            this.endGameHandler, 20000);\n    }\n\n    updateCache = (e) => {\n        var msg = JSON.parse(e.data);\n        console.log(\"Updated\",msg)\n        this.props.updateScoresInState(msg)\n    }\n\n    endGameHandler = () =>{\n        this.props.endGame()\n    }\n\n    submitHandler = () => {\n        let random = (Math.round(Math.random()) * 10) + (Math.round(Math.random()) * 20)\n        this.props.updatePvpScore(random);\n    }\n\n\n    renderGame = () => {\n        return <div>\n            <Row style={{paddingBottom:\"1%\"}}>\n                <Col>\n                    <Button block style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n                <Col>\n                    <Button block style={{backgroundColor:\"#d6b84d\",border:\"#d6b84d\"}} onClick={()=>{histroy.push(\"/pvp/highscore\")}}>New-Match</Button>\n                </Col>\n            </Row>\n            \n            <Card>\n            <Card.Header style={{color:\"white\",backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}}>\n            <h4>Game Id : {this.props.pvp.gameId}</h4>\n                        <h4>Time : {this.state.seconds}</h4>\n            </Card.Header>\n            <Card.Body>\n            <Row>\n                <Col>\n                <Card>\n                    <Card.Img variant=\"top\" src=\"/images/user.png\" />\n                    <Card.Body>\n                        <Card.Title>{this.props.username}</Card.Title>\n                        <Card.Text><h2>Score  {this.props.pvpScores[this.props.username]}</h2></Card.Text>\n                        <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}}  onClick={this.submitHandler} >Play</Button>\n                    </Card.Body>\n                </Card>\n                </Col>\n                <Col>\n                <Card>\n                    <Card.Img variant=\"top\" src=\"/images/user.png\" />\n                    <Card.Body>\n                        <Card.Title>{this.props.pvp.opponent}</Card.Title>\n                        <Card.Text><h2>Score  {this.props.pvpScores[this.props.pvp.opponent]}</h2></Card.Text>\n                        {/* <Button variant=\"primary\" onClick={this.submitHandler} >Play</Button> */}\n                    </Card.Body>\n                </Card>\n                </Col>\n            </Row>\n            </Card.Body>\n    </Card>\n\n            \n    </div>\n    }\n\n    renderWinner = () => {\n        return <div>\n            <Row style={{paddingBottom:\"1%\"}}>\n                <Col>\n                    <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n            </Row>\n            <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}}>\n            <Card.Header>\n            <h2>Congratulations {this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.opponent : this.props.username}  </h2>\n            </Card.Header>\n            <Card.Body>\n                <Row>\n                    <Col>\n                    <Card.Img variant=\"top\" src=\"/images/user.png\" />\n                    </Col>\n                    <Col>\n                    <Row style={{padding:\"1%\"}}>\n                        <Col>\n                        <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} text=\"white\">\n                        <Card.Header>\n                        SCORE\n                        </Card.Header>\n                        <Card.Body>\n                        <h2>{this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username]}</h2>\n                        </Card.Body>\n                        </Card>\n                        </Col>\n                    </Row>\n                    <Row style={{padding:\"1%\"}}>\n                        <Col>\n                        <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} text=\"white\">\n                        <Card.Header>\n                        LEVEL\n                        </Card.Header>\n                        <Card.Body>\n                        <h2>{this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username]}</h2>\n                        </Card.Body>\n                        </Card>\n                        </Col>\n                    </Row>\n                    <Row style={{padding:\"1%\"}}>\n                        <Col>\n                        <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} text=\"white\">\n                        <Card.Header>\n                        REWARDS\n                        </Card.Header>\n                        <Card.Body>\n                        <h2>{this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username]}</h2>\n                        </Card.Body>\n                        </Card>\n                        </Col>\n                    </Row>\n                    </Col>\n                </Row>\n    \n            </Card.Body>\n            </Card>\n        </div>\n    }\n\n    render(){\n        return <div>\n            {this.props.pvp && this.props.pvp.gameStatus != \"Finished\" ? this.renderGame() : this.renderWinner()}\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        pvp : state.pvp,\n        pvpScores : state.pvpScores\n    }\n}\n\nexport default connect(mapStateToProps,{updatePvpScore,endGame,updateScoresInState})(PVPGame);"]},"metadata":{},"sourceType":"module"}