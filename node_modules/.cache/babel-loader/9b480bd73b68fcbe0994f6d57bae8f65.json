{"ast":null,"code":"import gameserver from '../apis/gameserver';\nimport history from '../../src/history';\nimport store from '../index';\nimport game from '../components/game';\nexport const saveUser = (username, token) => {\n  history.push('/home');\n  return {\n    type: \"SAVE_USER\",\n    payload: {\n      username: username,\n      token: token\n    }\n  };\n};\nexport const loadLeaderboards = () => async dispatch => {\n  const response = await gameserver.get('/leaderboard');\n  dispatch({\n    type: \"LOAD_LEADERBOARDS\",\n    payload: {\n      leaderboards: response.data.leaderboards\n    }\n  });\n};\nexport const loadLeaderboardData = leaderboardId => async dispatch => {\n  console.log(\"action :\" + leaderboardId);\n  const response = await gameserver.get('/leaderboard/' + leaderboardId);\n  dispatch({\n    type: \"LOAD_LEADERBOARDS_DATA\",\n    payload: {\n      leaderboardsData: response.data,\n      leaderboardId: leaderboardId\n    }\n  });\n};\nexport const updateScore = (leaderboard, player, score, usertoken) => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  console.log(\"sessiontoken \", sessiontoken);\n  const response = await gameserver.post('/leaderboard/' + leaderboard + '/addScore', {\n    name: player,\n    score: score\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n\n  if (response != null && response.data.statusCode == 0) {\n    dispatch({\n      type: \"UPDATE_SCORE\",\n      payload: {\n        score: score\n      }\n    });\n  } else if (response != null && response.data.statusCode == -1) {\n    dispatch({\n      type: \"SHOW_SCORE_ERROR\",\n      payload: {\n        message: \"error in updating score\"\n      }\n    });\n  }\n};\nexport const pollOpponent = () => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  const username = store.getState().user.username;\n  const response = await gameserver.post('matchmaking/pollOpponent', {\n    playerName: username\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n  console.log(response);\n\n  if (response.data.status == \"Success\") {\n    dispatch({\n      type: \"FIND_MATCH\",\n      payload: {\n        status: \"FOUND\",\n        opponentUser: response.data.opponentPlayer\n      }\n    });\n  } else {\n    dispatch({\n      type: \"FIND_MATCH\",\n      payload: {\n        status: \"SEARCHING\",\n        opponentUser: \"\"\n      }\n    });\n  }\n};\nexport const findOpponent = () => async dispatch => {\n  const response = await gameserver.post('matchmaking/findOpponent', {\n    playerName: username\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n  console.log(response);\n\n  if (response.data.status == \"Success\") {\n    dispatch({\n      type: \"FIND_MATCH\",\n      payload: {\n        status: \"FOUND\",\n        opponentUser: response.data.opponentPlayer\n      }\n    });\n  } else {\n    dispatch({\n      type: \"FIND_MATCH\",\n      payload: {\n        status: \"SEARCHING\",\n        opponentUser: \"\"\n      }\n    });\n  }\n};\nexport const updatePvpScore = score => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  const username = store.getState().user.username;\n  const gameId = store.getState().pvp.gameId;\n  const response = await gameserver.post('matchmaking/updateScore', {\n    playerName: username,\n    gameId: gameId,\n    score: score\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n  console.log(response);\n  dispatch({\n    type: \"UPDATE_PVP_GAME_SCORES\",\n    payload: {\n      scores: response.data.scores\n    }\n  });\n};\nexport const loadCurrencies = () => async dispatch => {\n  const response = await gameserver.get('/wallet/currencies');\n  console.log(response);\n  dispatch({\n    type: \"LOAD_CURRENCIES\",\n    payload: {\n      currencies: response.data.currencies\n    }\n  });\n};\nexport const loadBalances = (username, usertoken) => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  console.log(\"sessiontoken \", sessiontoken);\n  const response = await gameserver.post('/wallet/balances', {\n    PlayerName: username\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n  dispatch({\n    type: \"LOAD_BALANCES\",\n    payload: {\n      balances: response.data.balances\n    }\n  });\n};","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/react/myapp/src/actions/useraction.js"],"names":["gameserver","history","store","game","saveUser","username","token","push","type","payload","loadLeaderboards","dispatch","response","get","leaderboards","data","loadLeaderboardData","leaderboardId","console","log","leaderboardsData","updateScore","leaderboard","player","score","usertoken","sessiontoken","getState","user","post","name","headers","statusCode","message","pollOpponent","playerName","status","opponentUser","opponentPlayer","findOpponent","updatePvpScore","gameId","pvp","scores","loadCurrencies","currencies","loadBalances","PlayerName","balances"],"mappings":"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","sourcesContent":["import gameserver from '../apis/gameserver'\nimport history from '../../src/history'\nimport store from '../index'\nimport game from '../components/game'\n\nexport const saveUser = (username, token) => {\n    history.push('/home')\n    return {\n        type : \"SAVE_USER\",\n        payload : {\n            username : username,\n            token : token\n        }\n    }\n}\n\nexport const loadLeaderboards = () => async (dispatch) => {\n    const response = await gameserver.get('/leaderboard')\n    dispatch({\n        type : \"LOAD_LEADERBOARDS\",\n        payload : {\n            leaderboards : response.data.leaderboards\n        }    \n    })    \n}\n\n\nexport const loadLeaderboardData = (leaderboardId) => async (dispatch) =>{\n    console.log(\"action :\"+leaderboardId)\n    const response =  await gameserver.get('/leaderboard/'+leaderboardId)\n    dispatch({\n        type : \"LOAD_LEADERBOARDS_DATA\",\n        payload : {\n            leaderboardsData : response.data,\n            leaderboardId : leaderboardId\n        }    \n    })\n}\n\nexport const updateScore = (leaderboard,player,score,usertoken) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    console.log(\"sessiontoken \",sessiontoken)\n    const response = await gameserver.post('/leaderboard/'+leaderboard+'/addScore',\n    {\n        name : player,\n        score : score\n    }\n    ,{\n            headers:{ token : sessiontoken }\n    }\n    )\n\n    if(response != null  && response.data.statusCode == 0){\n        dispatch({\n            type : \"UPDATE_SCORE\",\n            payload : {\n                score : score\n            }\n        })\n    }else if (response != null  && response.data.statusCode == -1){\n        dispatch({\n            type : \"SHOW_SCORE_ERROR\",\n            payload : {\n                message:\"error in updating score\"\n            }\n        })\n    }\n    \n}\nexport const pollOpponent = () => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n\n    const response = await gameserver.post('matchmaking/pollOpponent',{\n        playerName : username\n    },{\n        headers : {\n            token : sessiontoken\n        }\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"FOUND\",\n                opponentUser : response.data.opponentPlayer\n            }\n        })\n    }else{\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"SEARCHING\",\n                opponentUser : \"\"\n            }\n        })\n    }\n}\n\nexport const findOpponent = () => async (dispatch) => {\n    \n    const response = await gameserver.post('matchmaking/findOpponent',{\n        playerName : username\n    },{\n        headers : {\n            token : sessiontoken\n        }\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"FOUND\",\n                opponentUser : response.data.opponentPlayer\n            }\n        })\n    }else{\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"SEARCHING\",\n                opponentUser : \"\"\n            }\n        })\n    }\n    \n}\n\nexport const updatePvpScore = (score) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n    const gameId = store.getState().pvp.gameId\n    const response = await gameserver.post('matchmaking/updateScore',{\n        playerName : username,\n        gameId : gameId,\n        score : score\n    },{\n        headers : { token : sessiontoken}\n    })\n    \n    console.log(response);\n\n    dispatch({\n        type : \"UPDATE_PVP_GAME_SCORES\",\n        payload : {\n            scores : response.data.scores\n        }\n    })\n}\n\nexport const loadCurrencies  = () => async (dispatch) => {\n    const response = await gameserver.get('/wallet/currencies')\n    console.log(response)\n    dispatch({\n        type : \"LOAD_CURRENCIES\",\n        payload : {\n            currencies : response.data.currencies\n        }\n    })\n}\n\nexport const loadBalances = (username,usertoken) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    console.log(\"sessiontoken \",sessiontoken)\n    const response = await gameserver.post('/wallet/balances',{\n        PlayerName : username\n    },\n    {\n        headers:{ token : sessiontoken }\n    })\n\n    dispatch({\n        type : \"LOAD_BALANCES\",\n        payload : {\n           balances : response.data.balances\n        }\n    })\n\n}"]},"metadata":{},"sourceType":"module"}