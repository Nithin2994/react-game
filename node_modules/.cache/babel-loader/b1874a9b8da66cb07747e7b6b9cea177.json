{"ast":null,"code":"var _jsxFileName = \"/Users/nithin.reddy/Documents/react/myapp/src/components/gameFormComponent.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Form, Button } from 'react-bootstrap';\n\nclass GameForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.generateScore = formValues => {\n      this.props.generateScore(formValues.leaderboardId);\n    };\n  }\n\n  renderInput({\n    input,\n    type,\n    name,\n    lable,\n    meta\n  }) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 13\n      }\n    }, lable), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n      type: type,\n      name: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }\n    })), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 46\n      }\n    }, meta.error) : \"\");\n  }\n\n  renderSelect(field) {\n    return /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, field.lable), /*#__PURE__*/React.createElement(Form.Control, Object.assign({}, field.input, {\n      name: field.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }), field.children), field.meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 36\n      }\n    }, field.meta.error) : \"\");\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.props.handleSubmit(this.generateScore),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      name: \"leaderboardId\",\n      lable: \"LeaderboardId\",\n      component: this.renderSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"NA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }, \"--Select--\"), this.props.leaderboards != null && this.props.leaderboards.map(lb => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: lb,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 36\n        }\n      }, lb);\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 1\n      }\n    }, \"Click here for score\")));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.leaderboardId || formValues.leaderboardId == \"NA\") {\n    errors.leaderboardId = \"Select leaderboard\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'Game',\n  validate\n})(GameForm);","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/react/myapp/src/components/gameFormComponent.js"],"names":["React","Field","reduxForm","Form","Button","GameForm","Component","generateScore","formValues","props","leaderboardId","renderInput","input","type","name","lable","meta","touched","error","color","renderSelect","field","children","render","handleSubmit","leaderboards","map","lb","validate","errors","form"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Field, reduxForm} from 'redux-form'\nimport {Form, Button} from 'react-bootstrap'\n\nclass GameForm extends React.Component{\n\n    renderInput({input,type,name,lable,meta}){\n        return <div>\n            <label>{lable}</label>\n            <input {...input} type={type} name={name}/>\n            {( meta.touched && meta.error )? <div style={{color:\"red\"}}>{meta.error}</div> : \"\" } \n        </div>\n    }\n\n    renderSelect(field){\n        return <Form.Group>\n\n            <Form.Label>{field.lable}</Form.Label>\n            <Form.Control {...field.input} name={field.name}>\n                {field.children}\n            </Form.Control>\n            {( field.meta.error )? <div style={{color:\"red\"}}>{field.meta.error}</div> : \"\" } \n        </Form.Group>\n    }\n\n    generateScore = (formValues) =>{\n        this.props.generateScore(formValues.leaderboardId)\n    }\n\n    render(){\n        return <div>\n            <Form onSubmit={this.props.handleSubmit(this.generateScore)}>\n            <Field name=\"leaderboardId\" lable=\"LeaderboardId\" component={this.renderSelect}>\n                    <option value=\"NA\">--Select--</option>\n                    {\n                        this.props.leaderboards != null && this.props.leaderboards.map((lb) => {\n                            return <option key={lb}>{lb}</option>\n                        })\n                    }\n</Field>\n<Button type=\"submit\">Click here for score</Button>\n            </Form>\n            \n        </div>\n    }\n}\n\nconst validate = (formValues) => {\n    const errors ={}\n    if(!formValues.leaderboardId || formValues.leaderboardId == \"NA\"){\n        errors.leaderboardId = \"Select leaderboard\"\n    }\n    return errors\n}\n\nexport default reduxForm({\n    form : 'Game',\n    validate\n})(GameForm)"]},"metadata":{},"sourceType":"module"}