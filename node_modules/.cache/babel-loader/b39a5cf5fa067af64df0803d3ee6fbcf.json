{"ast":null,"code":"var _jsxFileName = \"/Users/nithin.reddy/Documents/react/myapp/src/components/pvpGame.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { updatePvpScore, endGame } from '../actions/useraction';\nimport histroy from '../history';\nimport { Button, Jumbotron, Row, Col, Card } from 'react-bootstrap';\n\nclass PVPGame extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      seconds: 20\n    };\n\n    this.endGameHandler = () => {\n      this.props.endGame();\n    };\n\n    this.submitHandler = () => {\n      let random = Math.round(Math.random()) * 10 + Math.round(Math.random()) * 20;\n      this.props.updatePvpScore(random);\n    };\n\n    this.renderGame = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          padding: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: () => {\n          histroy.push(\"/home\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }\n      }, \"back\"))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Jumbotron, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 33\n        }\n      }, \"Game Id : \", this.props.pvp.gameId)), \"Time : \", this.state.seconds)), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }\n      }, this.props.username), /*#__PURE__*/React.createElement(Card.Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }\n      }, \"Score : \", this.props.pvpScores[this.props.username]), /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.submitHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }\n      }, \"Play\")))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"%PUBLIC_URL%/images/avatar.jpeg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }\n      }, this.props.pvp.opponent), /*#__PURE__*/React.createElement(Card.Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }\n      }, \"Score : \", this.props.pvpScores[this.props.pvp.opponent]))))));\n    };\n\n    this.renderWinner = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: () => {\n          histroy.push(\"/home\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }, \"back\"), /*#__PURE__*/React.createElement(Jumbotron, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, \"Game Finished\"), /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, \"Winner is \", this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.opponent : this.props.username, \"[score  : \", this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username], \"]\")));\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        seconds: this.state.seconds - 1\n      });\n    }, 1000);\n    setTimeout(this.endGameHandler, 20000);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 16\n      }\n    }, this.props.pvp && this.props.pvp.gameStatus != \"Finished\" ? this.renderGame() : this.renderWinner());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.user.username,\n    pvp: state.pvp,\n    pvpScores: state.pvpScores\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updatePvpScore,\n  endGame\n})(PVPGame);","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/react/myapp/src/components/pvpGame.js"],"names":["React","connect","updatePvpScore","endGame","histroy","Button","Jumbotron","Row","Col","Card","PVPGame","Component","state","seconds","endGameHandler","props","submitHandler","random","Math","round","renderGame","padding","push","pvp","gameId","width","username","pvpScores","opponent","renderWinner","winner","componentDidMount","setInterval","setState","setTimeout","render","gameStatus","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport {updatePvpScore, endGame} from '../actions/useraction'\nimport histroy from '../history'\nimport {Button, Jumbotron, Row, Col, Card} from 'react-bootstrap'\n\nclass PVPGame extends React.Component{\n\n    state = {seconds : 20}\n\n    componentDidMount(){\n        setInterval(\n            ()=>{ this.setState({\n                seconds : this.state.seconds - 1\n            })},1000\n        )\n        setTimeout(\n            this.endGameHandler, 20000);\n    }\n\n    endGameHandler = () =>{\n        this.props.endGame()\n    }\n\n    submitHandler = () => {\n        let random = (Math.round(Math.random()) * 10) + (Math.round(Math.random()) * 20)\n        this.props.updatePvpScore(random);\n    }\n\n\n    renderGame = () => {\n        return <div>\n            <Row style={{padding:\"1%\"}}>\n                <Col>\n                    <Button onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Jumbotron> <h3>Game Id : {this.props.pvp.gameId}</h3></Jumbotron>\n                    Time : {this.state.seconds}\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                <Card style={{ width: '18rem' }}>\n                    <Card.Img variant=\"top\" src=\"\" />\n                    <Card.Body>\n                        <Card.Title>{this.props.username}</Card.Title>\n                        <Card.Text>Score : {this.props.pvpScores[this.props.username]}</Card.Text>\n                        <Button variant=\"primary\" onClick={this.submitHandler} >Play</Button>\n                    </Card.Body>\n                </Card>\n                </Col>\n                <Col>\n                <Card style={{ width: '18rem' }}>\n                    <Card.Img variant=\"top\" src=\"%PUBLIC_URL%/images/avatar.jpeg\" />\n                    <Card.Body>\n                        <Card.Title>{this.props.pvp.opponent}</Card.Title>\n                        <Card.Text>Score : {this.props.pvpScores[this.props.pvp.opponent]}</Card.Text>\n                        {/* <Button variant=\"primary\" onClick={this.submitHandler} >Play</Button> */}\n                    </Card.Body>\n                </Card>\n                </Col>\n            </Row>\n\n    </div>\n    }\n\n    renderWinner = () => {\n        return <div>\n            <Button onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n            <Jumbotron>\n            <h2>Game Finished</h2>\n            <h2>Winner is {this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.opponent : this.props.username} \n    [score  : {this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username]}]</h2>\n            </Jumbotron>\n        </div>\n    }\n\n    render(){\n        return <div>\n            {this.props.pvp && this.props.pvp.gameStatus != \"Finished\" ? this.renderGame() : this.renderWinner()}\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        pvp : state.pvp,\n        pvpScores : state.pvpScores\n    }\n}\n\nexport default connect(mapStateToProps,{updatePvpScore,endGame})(PVPGame);"]},"metadata":{},"sourceType":"module"}