{"ast":null,"code":"var _jsxFileName = \"/Users/nithin.reddy/Documents/react/myapp/src/components/tiktoktoe.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { updatePvpScore, endGame, updateScoresInState } from '../actions/useraction';\nimport histroy from '../history';\nimport { Button, Table, Row, Col, Card, Container } from 'react-bootstrap';\nimport Cell from './cell';\nimport gameserver from '../apis/gameserver';\nimport _ from 'lodash';\n\nclass PVPTikTokToeGame extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      seconds: 60,\n      selectedData: {},\n      myTurn: true\n    };\n\n    this.updateCache = e => {\n      var msg = JSON.parse(e.data);\n      console.log(\"Received \", msg);\n      this.updateGridVals(msg);\n\n      if (!this.state.winner) {\n        this.setState({\n          myTurn: true\n        });\n      }\n    };\n\n    this.updateGridVals = msg => {\n      var updatedValues = { ...this.state.selectedData\n      };\n      updatedValues[msg.id] = msg.player;\n      this.setState({\n        selectedData: updatedValues\n      });\n\n      if (this.state.selectedData[1] == this.state.selectedData[2]) {\n        if (this.state.selectedData[2] == this.state.selectedData[3]) {\n          if (this.state.selectedData[1]) {\n            this.setState({\n              winner: \"Winner is \" + this.state.selectedData[1]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[4] == this.state.selectedData[5]) {\n        if (this.state.selectedData[5] == this.state.selectedData[6]) {\n          if (this.state.selectedData[4]) {\n            this.setState({\n              winner: \"Winner is \" + this.state.selectedData[4]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[7] == this.state.selectedData[8]) {\n        if (this.state.selectedData[8] == this.state.selectedData[9]) {\n          if (this.state.selectedData[8]) {\n            this.setState({\n              winner: \"Winner is \" + this.state.selectedData[8]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[1] == this.state.selectedData[5]) {\n        if (this.state.selectedData[5] == this.state.selectedData[9]) {\n          if (this.state.selectedData[5]) {\n            this.setState({\n              winner: \"Winner is \" + this.state.selectedData[5]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[3] == this.state.selectedData[5]) {\n        if (this.state.selectedData[5] == this.state.selectedData[7]) {\n          if (this.state.selectedData[5]) {\n            this.setState({\n              winner: \"Winner is \" + this.state.selectedData[5]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[2] == this.state.selectedData[5]) {\n        if (this.state.selectedData[5] == this.state.selectedData[8]) {\n          if (this.state.selectedData[5]) {\n            this.setState({\n              winner: \"Winner is \" + this.state.selectedData[5]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[1] == this.state.selectedData[4]) {\n        if (this.state.selectedData[4] == this.state.selectedData[7]) {\n          if (this.state.selectedData[4]) {\n            this.setState({\n              winner: \"Winner is \" + this.state.selectedData[4]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[3] == this.state.selectedData[6]) {\n        if (this.state.selectedData[6] == this.state.selectedData[9]) {\n          if (this.state.selectedData[6]) {\n            this.setState({\n              winner: \"Winner is \" + this.state.selectedData[6]\n            });\n          }\n        }\n      }\n\n      let count = 0;\n\n      _.forEach(this.state.selectedData, function (value, key) {\n        count++;\n      });\n\n      if (count == 9) {\n        this.setState({\n          winner: \"Match is Draw\"\n        });\n      }\n\n      if (this.state.winner) {\n        this.setState({\n          myTurn: false\n        });\n      }\n    };\n\n    this.endGameHandler = () => {\n      this.props.endGame();\n    };\n\n    this.selectCellHandler = async id => {\n      if (this.state.myTurn == true) {\n        console.log(\"Selected : \", id);\n        const response = await gameserver.post(\"/matchmaking/tiktoktoe\", {\n          player: this.props.username,\n          id: id\n        });\n\n        if (response) {\n          this.updateGridVals({\n            player: this.props.username,\n            id: id\n          });\n        }\n\n        this.setState({\n          myTurn: false\n        });\n      }\n    };\n\n    this.renderGameGrid = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }\n      }), [1, 2, 3].map(id => {\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: id,\n          style: {\n            width: \"5%\"\n          },\n          id: id,\n          selected: this.state.selectedData[id],\n          selectCell: this.selectCellHandler,\n          currentPlayer: this.props.username,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 24\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      }), [4, 5, 6].map(id => {\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: id,\n          style: {\n            width: \"5%\"\n          },\n          id: id,\n          selected: this.state.selectedData[id],\n          selectCell: this.selectCellHandler,\n          currentPlayer: this.props.username,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 28\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }\n      }), [7, 8, 9].map(id => {\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: id,\n          style: {\n            width: \"5%\"\n          },\n          id: id,\n          selected: this.state.selectedData[id],\n          selectCell: this.selectCellHandler,\n          currentPlayer: this.props.username,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 28\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }\n      }))));\n    };\n\n    this.renderWinner = () => {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 16\n        }\n      }, this.state.winner, \" \");\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          paddingBottom: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        onClick: () => {\n          histroy.push(\"/home\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }\n      }, \"back\"))), /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }\n      }, \"TikTokToe \", this.props.pvp.gameId), /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }\n      }, this.state.winner ? this.state.winner : this.state.myTurn ? \"Your Turn\" : \"Opponent Turn\")), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }\n      }, this.renderGameGrid())));\n    };\n  }\n\n  componentDidMount() {\n    this.ws = new WebSocket('ws://localhost:8081/ws');\n\n    this.ws.onopen = () => this.ws.send(JSON.stringify({\n      gameId: \"TikTokToe\",\n      isJoin: \"true\",\n      Player: this.props.username\n    }));\n\n    this.ws.addEventListener(\"message\", this.updateCache);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.user.username,\n    pvp: state.pvp\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updatePvpScore,\n  endGame,\n  updateScoresInState\n})(PVPTikTokToeGame);","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/react/myapp/src/components/tiktoktoe.js"],"names":["React","connect","updatePvpScore","endGame","updateScoresInState","histroy","Button","Table","Row","Col","Card","Container","Cell","gameserver","_","PVPTikTokToeGame","Component","state","seconds","selectedData","myTurn","updateCache","e","msg","JSON","parse","data","console","log","updateGridVals","winner","setState","updatedValues","id","player","count","forEach","value","key","endGameHandler","props","selectCellHandler","response","post","username","renderGameGrid","map","width","renderWinner","render","paddingBottom","backgroundColor","border","push","pvp","gameId","componentDidMount","ws","WebSocket","onopen","send","stringify","isJoin","Player","addEventListener","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport {updatePvpScore, endGame, updateScoresInState} from '../actions/useraction'\nimport histroy from '../history'\nimport {Button, Table, Row, Col, Card, Container} from 'react-bootstrap'\nimport Cell from './cell'\nimport gameserver from '../apis/gameserver'\nimport _ from 'lodash';\n\nclass PVPTikTokToeGame extends React.Component{\n\n    state = {\n        seconds : 60,\n        selectedData : {},\n        myTurn : true\n    }\n\n    \n\n    componentDidMount(){\n\n        this.ws = new WebSocket('ws://localhost:8081/ws');\n        this.ws.onopen = () => this.ws.send(JSON.stringify({\n            gameId : \"TikTokToe\",\n            isJoin : \"true\",\n            Player : this.props.username\n        }));\n\n        this.ws.addEventListener(\"message\", this.updateCache)\n\n    }\n\n    updateCache = (e) => {\n        var msg = JSON.parse(e.data);\n        console.log(\"Received \",msg)\n        this.updateGridVals(msg)\n        if(!this.state.winner){\n            this.setState({\n                myTurn : true\n            })\n        }\n        \n    }\n\n    updateGridVals = (msg) => {\n        var updatedValues = {...this.state.selectedData}\n        updatedValues[msg.id] = msg.player\n        this.setState({\n            selectedData : updatedValues\n        })\n\n       \n\n        if(this.state.selectedData[1] == this.state.selectedData[2]){\n            if(this.state.selectedData[2] == this.state.selectedData[3]){\n                if(this.state.selectedData[1]){\n                    this.setState({ winner : \"Winner is \"+this.state.selectedData[1]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[4] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[6]){\n                if(this.state.selectedData[4]){this.setState({winner : \"Winner is \"+this.state.selectedData[4]})}\n            }\n        }\n\n        if(this.state.selectedData[7] == this.state.selectedData[8]){\n            if(this.state.selectedData[8] == this.state.selectedData[9]){\n                if(this.state.selectedData[8]){\n                    this.setState({winner : \"Winner is \"+this.state.selectedData[8]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[1] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[9]){\n                if(this.state.selectedData[5]){\n                    this.setState({winner : \"Winner is \"+this.state.selectedData[5]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[3] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[7]){\n                if(this.state.selectedData[5]){\n                    this.setState({winner : \"Winner is \"+this.state.selectedData[5]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[2] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[8]){\n                if(this.state.selectedData[5]){\n                    this.setState({winner : \"Winner is \"+this.state.selectedData[5]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[1] == this.state.selectedData[4]){\n            if(this.state.selectedData[4] == this.state.selectedData[7]){\n                if(this.state.selectedData[4]){\n                    this.setState({winner : \"Winner is \"+this.state.selectedData[4]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[3] == this.state.selectedData[6]){\n            if(this.state.selectedData[6] == this.state.selectedData[9]){\n                if(this.state.selectedData[6]){\n                    this.setState({winner : \"Winner is \"+this.state.selectedData[6]})\n                }\n            }\n        }\n\n        let count = 0;\n        _.forEach(this.state.selectedData, function(value, key) {\n            count ++\n        });\n\n        if(count == 9){\n            this.setState({\n                winner : \"Match is Draw\"\n            })\n        }\n\n        if(this.state.winner){\n            this.setState({\n                myTurn : false\n            })\n        }\n    }\n\n    endGameHandler = () =>{\n        this.props.endGame()\n    }\n\n    selectCellHandler = async (id) =>{\n        if(this.state.myTurn == true){\n            console.log(\"Selected : \",id)\n            const response = await gameserver.post(\"/matchmaking/tiktoktoe\",{\n                player : this.props.username,\n                id:id\n            })\n    \n            if(response){\n                this.updateGridVals({\n                    player : this.props.username,\n                    id : id\n                })\n            }\n\n            this.setState({\n                myTurn : false\n            })\n        }\n    }\n\n    renderGameGrid = () => {\n\n        return <div>\n            <Container>\n            <Row>\n                <Col md={3} lg={3}></Col>\n                \n                {[1,2,3].map((id) =>{\n                return <Cell key={id} style={{width:\"5%\"}} id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler} currentPlayer={this.props.username}/>\n                })}\n                \n                <Col md={3} lg={3}></Col>\n            </Row>\n            <Row>\n                <Col md={3} lg={3}></Col>\n                {[4,5,6].map(id =>{\n                    return <Cell key={id} style={{width:\"5%\"}}  id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler} currentPlayer={this.props.username}/>\n                })}\n                <Col md={3} lg={3}></Col>\n            </Row>\n            <Row>\n                <Col md={3} lg={3}></Col>\n                {[7,8,9].map(id =>{\n                    return <Cell key={id} style={{width:\"5%\"}}  id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler} currentPlayer={this.props.username}/>\n                })}\n                <Col md={3} lg={3}></Col>\n            </Row>\n            </Container>\n        </div>\n    }\n\n    renderWinner = () => {\n        return <h2>{this.state.winner} </h2>\n    }\n\n   \n    render = () => {\n        return <div>\n            <Row style={{paddingBottom:\"1%\"}}>\n                <Col>\n                    <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n            </Row>\n            <Card>\n            <Card.Header>\n            <h2>TikTokToe {this.props.pvp.gameId}</h2>\n            <h3>{this.state.winner ? this.state.winner : this.state.myTurn ? \"Your Turn\":\"Opponent Turn\"}</h3>\n            </Card.Header>\n            <Card.Body>\n                {this.renderGameGrid()}\n            </Card.Body>\n            </Card>\n        </div>\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        pvp : state.pvp\n    }\n}\n\nexport default connect(mapStateToProps,{updatePvpScore,endGame,updateScoresInState})(PVPTikTokToeGame);"]},"metadata":{},"sourceType":"module"}