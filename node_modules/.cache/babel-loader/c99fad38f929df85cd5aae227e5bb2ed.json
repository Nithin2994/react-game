{"ast":null,"code":"var _jsxFileName = \"/Users/nithin.reddy/Documents/react/myapp/src/components/game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { updateScore, loadLeaderboards } from '../actions/useraction';\nimport GameForm from './gameFormComponent';\n\nclass GameConatiner extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.submitHandler = async leaderboardId => {\n      let random = Math.round(Math.random()) * 10 + Math.round(Math.random()) * 20;\n      this.props.updateScore(leaderboardId, this.props.username, random);\n    };\n  }\n\n  componentDidMount() {\n    this.props.loadLeaderboards();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(GameForm, {\n      leaderboards: this.props.leaderboards,\n      generateScore: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }), this.props.errorMessage != \"\" ? this.props.errorMessage : \"\", \"Your current game score : \", this.props.score);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.user.username,\n    token: state.user.token,\n    leaderboards: state.leaderboards,\n    score: state.score,\n    errorMessage: state.errorMessage\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateScore,\n  loadLeaderboards\n})(GameConatiner);","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/react/myapp/src/components/game.js"],"names":["React","connect","updateScore","loadLeaderboards","GameForm","GameConatiner","Component","submitHandler","leaderboardId","random","Math","round","props","username","componentDidMount","render","leaderboards","errorMessage","score","mapStateToProps","state","user","token"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,WAAT,EAAsBC,gBAAtB,QAA6C,uBAA7C;AAEA,OAAOC,QAAP,MAAqB,qBAArB;;AACA,MAAMC,aAAN,SAA4BL,KAAK,CAACM,SAAlC,CAA2C;AAAA;AAAA;;AAAA,SAMvCC,aANuC,GAMvB,MAAOC,aAAP,IAAyB;AACjC,UAAIC,MAAM,GAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,EAAX,IAA4B,EAA7B,GAAoCC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,EAAX,IAA4B,EAA7E;AACA,WAAKG,KAAL,CAAWV,WAAX,CAAuBM,aAAvB,EAAqC,KAAKI,KAAL,CAAWC,QAAhD,EAAyDJ,MAAzD;AACP,KATsC;AAAA;;AAEvCK,EAAAA,iBAAiB,GAAE;AACf,SAAKF,KAAL,CAAWT,gBAAX;AACH;;AAODY,EAAAA,MAAM,GAAE;AACJ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACH,oBAAC,QAAD;AAAU,MAAA,YAAY,EAAE,KAAKH,KAAL,CAAWI,YAAnC;AAAiD,MAAA,aAAa,EAAE,KAAKT,aAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADG,EAED,KAAKK,KAAL,CAAWK,YAAX,IAA2B,EAA3B,GAAgC,KAAKL,KAAL,CAAWK,YAA3C,GAA0D,EAFzD,gCAGwB,KAAKL,KAAL,CAAWM,KAHnC,CAAP;AAKH;;AAjBsC;;AAoB3C,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHP,IAAAA,QAAQ,EAAGO,KAAK,CAACC,IAAN,CAAWR,QADnB;AAEHS,IAAAA,KAAK,EAAGF,KAAK,CAACC,IAAN,CAAWC,KAFhB;AAGHN,IAAAA,YAAY,EAAGI,KAAK,CAACJ,YAHlB;AAIHE,IAAAA,KAAK,EAAGE,KAAK,CAACF,KAJX;AAKHD,IAAAA,YAAY,EAAGG,KAAK,CAACH;AALlB,GAAP;AAOH,CARD;;AAUA,eAAehB,OAAO,CAACkB,eAAD,EAAiB;AAACjB,EAAAA,WAAD;AAAaC,EAAAA;AAAb,CAAjB,CAAP,CAAwDE,aAAxD,CAAf","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport { updateScore, loadLeaderboards} from '../actions/useraction'\n\nimport GameForm from './gameFormComponent'\nclass GameConatiner extends React.Component{\n\n    componentDidMount(){\n        this.props.loadLeaderboards();\n    }\n\n    submitHandler = async (leaderboardId) => {\n            let random = (Math.round(Math.random()) * 10) + (Math.round(Math.random()) * 20)\n            this.props.updateScore(leaderboardId,this.props.username,random)\n    }\n\n    render(){\n        return <div>\n            <GameForm leaderboards={this.props.leaderboards} generateScore={this.submitHandler}/>\n            { this.props.errorMessage != \"\" ? this.props.errorMessage : \"\"}\n            Your current game score : {this.props.score}\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        token : state.user.token,\n        leaderboards : state.leaderboards,\n        score : state.score,\n        errorMessage : state.errorMessage\n    }\n}\n\nexport default connect(mapStateToProps,{updateScore,loadLeaderboards})(GameConatiner)"]},"metadata":{},"sourceType":"module"}