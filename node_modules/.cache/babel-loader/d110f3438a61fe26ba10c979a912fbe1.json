{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nithin.reddy/Documents/GitHub/react-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nithin.reddy/Documents/GitHub/react-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import gameserver from'../apis/gameserver';import history from'../../src/history';import store from'../index';export var saveUser=function saveUser(username,token){history.push(\"/home\");return{type:\"SAVE_USER\",payload:{username:username,token:token}};};export var logoutUser=function logoutUser(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var sessiontoken,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:sessiontoken=store.getState().user.token;_context.next=3;return gameserver.post(\"/logout\",{},{headers:{token:sessiontoken}});case 3:response=_context.sent;if(response.status==\"Success\"){dispatch({type:\"CLEAR_USER\",payload:{}});}case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var loadLeaderboards=function loadLeaderboards(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return gameserver.get('/leaderboard');case 2:response=_context2.sent;dispatch({type:\"LOAD_LEADERBOARDS\",payload:{leaderboards:response.data.leaderboards}});case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var loadLeaderboardData=function loadLeaderboardData(leaderboardId){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var response;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:console.log(\"action :\"+leaderboardId);_context3.next=3;return gameserver.get('/leaderboard/'+leaderboardId);case 3:response=_context3.sent;dispatch({type:\"LOAD_LEADERBOARDS_DATA\",payload:{leaderboardsData:response.data,leaderboardId:leaderboardId}});case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var updateScore=function updateScore(leaderboard,player,score){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var sessiontoken,response;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:sessiontoken=store.getState().user.token;console.log(\"sessiontoken \",sessiontoken);_context4.next=4;return gameserver.post('/leaderboard/'+leaderboard+'/addScore',{name:player,score:score},{headers:{token:sessiontoken}});case 4:response=_context4.sent;if(response!=null&&response.data.statusCode==0){dispatch({type:\"UPDATE_SCORE\",payload:{score:score}});}else if(response!=null&&response.data.statusCode==-1){dispatch({type:\"SHOW_SCORE_ERROR\",payload:{message:\"error in updating score\"}});}case 6:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}();};export var pollOpponent=function pollOpponent(){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){var sessiontoken,username,response;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:sessiontoken=store.getState().user.token;username=store.getState().user.username;_context5.next=4;return gameserver.post('matchmaking/pollOpponent',{playerName:username},{headers:{token:sessiontoken}});case 4:response=_context5.sent;console.log(response);if(response.data.status==\"Success\"){dispatch({type:\"FIND_MATCH\",payload:{status:\"FOUND\",opponentUser:response.data.opponentPlayer,gameId:response.data.gameId}});}else{dispatch({type:\"FIND_MATCH\",payload:{status:\"SEARCHING\",opponentUser:\"\",gameId:\"NA\"}});}case 7:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x5){return _ref5.apply(this,arguments);};}();};export var findOpponent=function findOpponent(gameName){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch){var sessiontoken,username,response;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:sessiontoken=store.getState().user.token;username=store.getState().user.username;_context6.next=4;return gameserver.post('matchmaking/findOpponent',{playerName:username,gameName:gameName},{headers:{token:sessiontoken}});case 4:response=_context6.sent;console.log(response);if(response.data.status==\"Success\"){dispatch({type:\"FIND_MATCH\",payload:{status:\"FOUND\",opponentUser:response.data.opponentPlayer,gameId:response.data.gameId}});}else{dispatch({type:\"FIND_MATCH\",payload:{status:\"SEARCHING\",opponentUser:\"\",gameId:\"NA\"}});}case 7:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x6){return _ref6.apply(this,arguments);};}();};export var updatePvpScore=function updatePvpScore(score){return/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch){var sessiontoken,username,gameId,response;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:sessiontoken=store.getState().user.token;username=store.getState().user.username;gameId=store.getState().pvp.gameId;_context7.next=5;return gameserver.post('matchmaking/updateScore',{playerName:username,gameId:gameId,score:score},{headers:{token:sessiontoken}});case 5:response=_context7.sent;console.log(response);dispatch({type:\"UPDATE_PVP_GAME_SCORES\",payload:{scores:response.data.scores}});case 8:case\"end\":return _context7.stop();}}},_callee7);}));return function(_x7){return _ref7.apply(this,arguments);};}();};export var updateScoresInState=function updateScoresInState(scores){return{type:\"UPDATE_PVP_GAME_SCORES\",payload:{scores:scores}};};export var endGame=function endGame(){return/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(dispatch){var sessiontoken,username,gameId,response;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:sessiontoken=store.getState().user.token;username=store.getState().user.username;gameId=store.getState().pvp.gameId;_context8.next=5;return gameserver.post('/matchmaking/endGame',{playerName:username,gameId:gameId},{headers:{token:sessiontoken}});case 5:response=_context8.sent;console.log(response);if(response.data.status==\"Success\"){dispatch({type:\"END_PVP_GAME\",payload:{winner:response.data.winner}});}case 8:case\"end\":return _context8.stop();}}},_callee8);}));return function(_x8){return _ref8.apply(this,arguments);};}();};export var loadCurrencies=function loadCurrencies(){return/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(dispatch){var response;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return gameserver.get('/wallet/currencies');case 2:response=_context9.sent;console.log(response);dispatch({type:\"LOAD_CURRENCIES\",payload:{currencies:response.data.currencies}});case 5:case\"end\":return _context9.stop();}}},_callee9);}));return function(_x9){return _ref9.apply(this,arguments);};}();};export var loadBalances=function loadBalances(username,usertoken){return/*#__PURE__*/function(){var _ref10=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(dispatch){var sessiontoken,response;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:sessiontoken=store.getState().user.token;console.log(\"sessiontoken \",sessiontoken);_context10.next=4;return gameserver.post('/wallet/balances',{PlayerName:username},{headers:{token:sessiontoken}});case 4:response=_context10.sent;dispatch({type:\"LOAD_BALANCES\",payload:{balances:response.data.balances}});case 6:case\"end\":return _context10.stop();}}},_callee10);}));return function(_x10){return _ref10.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/GitHub/react-game/src/actions/useraction.js"],"names":["gameserver","history","store","saveUser","username","token","push","type","payload","logoutUser","dispatch","sessiontoken","getState","user","post","headers","response","status","loadLeaderboards","get","leaderboards","data","loadLeaderboardData","leaderboardId","console","log","leaderboardsData","updateScore","leaderboard","player","score","name","statusCode","message","pollOpponent","playerName","opponentUser","opponentPlayer","gameId","findOpponent","gameName","updatePvpScore","pvp","scores","updateScoresInState","endGame","winner","loadCurrencies","currencies","loadBalances","usertoken","PlayerName","balances"],"mappings":"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","sourcesContent":["import gameserver from '../apis/gameserver'\nimport history from '../../src/history'\nimport store from '../index'\n\nexport const saveUser = (username, token) => {\n    \n    history.push(\"/home\")\n    return {\n        type : \"SAVE_USER\",\n        payload : {\n            username : username,\n            token : token\n        }\n    }\n}\n\nexport const logoutUser = () => async (dispatch) =>{\n    const sessiontoken = store.getState().user.token\n    const response = await gameserver.post(\"/logout\",{},{\n        headers : { token : sessiontoken }\n    })\n\n    if(response.status == \"Success\"){\n        dispatch({\n            type:\"CLEAR_USER\",\n            payload:{}\n        })\n    }\n}\n\nexport const loadLeaderboards = () => async (dispatch) => {\n    const response = await gameserver.get('/leaderboard')\n    dispatch({\n        type : \"LOAD_LEADERBOARDS\",\n        payload : {\n            leaderboards : response.data.leaderboards\n        }    \n    })    \n}\n\n\nexport const loadLeaderboardData = (leaderboardId) => async (dispatch) =>{\n    console.log(\"action :\"+leaderboardId)\n    const response =  await gameserver.get('/leaderboard/'+leaderboardId)\n    dispatch({\n        type : \"LOAD_LEADERBOARDS_DATA\",\n        payload : {\n            leaderboardsData : response.data,\n            leaderboardId : leaderboardId\n        }    \n    })\n}\n\nexport const updateScore = (leaderboard,player,score) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    console.log(\"sessiontoken \",sessiontoken)\n    const response = await gameserver.post('/leaderboard/'+leaderboard+'/addScore',\n    {\n        name : player,\n        score : score\n    }\n    ,{\n            headers:{ token : sessiontoken }\n    }\n    )\n\n    if(response != null  && response.data.statusCode == 0){\n        dispatch({\n            type : \"UPDATE_SCORE\",\n            payload : {\n                score : score\n            }\n        })\n    }else if (response != null  && response.data.statusCode == -1){\n        dispatch({\n            type : \"SHOW_SCORE_ERROR\",\n            payload : {\n                message:\"error in updating score\"\n            }\n        })\n    }\n    \n}\nexport const pollOpponent = () => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n\n    const response = await gameserver.post('matchmaking/pollOpponent',{\n        playerName : username\n    },{\n        headers : {\n            token : sessiontoken\n        }\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"FOUND\",\n                opponentUser : response.data.opponentPlayer,\n                gameId : response.data.gameId\n            }\n        })\n    }else{\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"SEARCHING\",\n                opponentUser : \"\",\n                gameId:\"NA\"\n            }\n        })\n    }\n}\n\nexport const findOpponent = (gameName) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n    const response = await gameserver.post('matchmaking/findOpponent',{\n        playerName : username,\n        gameName : gameName\n    },{\n        headers : {\n            token : sessiontoken\n        }\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"FOUND\",\n                opponentUser : response.data.opponentPlayer,\n                gameId : response.data.gameId\n            }\n        })\n    }else{\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"SEARCHING\",\n                opponentUser : \"\",\n                gameId : \"NA\"\n            }\n        })\n    }\n    \n}\n\nexport const updatePvpScore = (score) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n    const gameId = store.getState().pvp.gameId\n    const response = await gameserver.post('matchmaking/updateScore',{\n        playerName : username,\n        gameId : gameId,\n        score : score\n    },{\n        headers : { token : sessiontoken}\n    })\n    \n    console.log(response);\n\n    dispatch({\n        type : \"UPDATE_PVP_GAME_SCORES\",\n        payload : {\n            scores : response.data.scores\n        }\n    })\n}\n\nexport const updateScoresInState = (scores) => {\n    return {\n        type : \"UPDATE_PVP_GAME_SCORES\",\n        payload : {\n            scores : scores\n        }\n    }\n}\n\nexport const endGame = () => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n    const gameId = store.getState().pvp.gameId\n\n    const response = await gameserver.post('/matchmaking/endGame',{\n        playerName : username,\n        gameId : gameId\n    },{\n        headers:{token : sessiontoken}\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"END_PVP_GAME\",\n            payload:{\n                winner : response.data.winner\n            }\n        })\n    }\n\n}\n\nexport const loadCurrencies  = () => async (dispatch) => {\n    const response = await gameserver.get('/wallet/currencies')\n    console.log(response)\n    dispatch({\n        type : \"LOAD_CURRENCIES\",\n        payload : {\n            currencies : response.data.currencies\n        }\n    })\n}\n\nexport const loadBalances = (username,usertoken) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    console.log(\"sessiontoken \",sessiontoken)\n    const response = await gameserver.post('/wallet/balances',{\n        PlayerName : username\n    },\n    {\n        headers:{ token : sessiontoken }\n    })\n\n    dispatch({\n        type : \"LOAD_BALANCES\",\n        payload : {\n           balances : response.data.balances\n        }\n    })\n\n}"]},"metadata":{},"sourceType":"module"}