{"ast":null,"code":"import gameserver from '../apis/gameserver';\nexport const saveUser = (username, token) => {\n  return {\n    type: \"SAVE_USER\",\n    payload: {\n      username: username,\n      token: token\n    }\n  };\n};\nexport const loadLeaderboards = () => async dispatch => {\n  const response = await gameserver.get('/leaderboard');\n  dispatch({\n    type: \"LOAD_LEADERBOARDS\",\n    payload: {\n      leaderboards: response.data.leaderboards\n    }\n  });\n};\nexport const loadLeaderboardData = leaderboardId => async dispatch => {\n  console.log(\"action :\" + leaderboardId);\n  const response = await gameserver.get('/leaderboard/' + leaderboardId);\n  dispatch({\n    type: \"LOAD_LEADERBOARDS_DATA\",\n    payload: {\n      leaderboardsData: response.data,\n      leaderboardId: leaderboardId\n    }\n  });\n};\nexport const updateScore = (leaderboard, player, score, usertoken) => async dispatch => {\n  console.log(\"update \", usertoken);\n  const response = await gameserver.post('/leaderboard/' + leaderboard + '/addScore', {\n    name: player,\n    score: score\n  }, {\n    headers: {\n      token: usertoken\n    }\n  });\n\n  if (response != null && response.data.statusCode == 0) {\n    dispatch({\n      type: \"UPDATE_SCORE\",\n      payload: {\n        score: score\n      }\n    });\n  } else if (response != null && response.data.state == \"Failed\") {\n    dispatch({\n      type: \"SHOW_SCORE_ERROR\",\n      payload: {\n        message: \"error in updating score\"\n      }\n    });\n  }\n};\nexport const loadCurrencies = () => async dispatch => {\n  const response = await gameserver.get('/wallet/currencies');\n  console.log(response);\n  dispatch({\n    type: \"LOAD_CURRENCIES\",\n    payload: {\n      currencies: response.data.currencies\n    }\n  });\n};\nexport const loadBalances = (username, usertoken) => async dispatch => {\n  const response = await gameserver.post('/wallet/balances', {\n    PlayerName: username\n  }, {\n    headers: {\n      token: usertoken\n    }\n  });\n  dispatch({\n    type: \"LOAD_BALANCES\",\n    payload: {\n      balances: response.data.balances\n    }\n  });\n};","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/react/myapp/src/actions/useraction.js"],"names":["gameserver","saveUser","username","token","type","payload","loadLeaderboards","dispatch","response","get","leaderboards","data","loadLeaderboardData","leaderboardId","console","log","leaderboardsData","updateScore","leaderboard","player","score","usertoken","post","name","headers","statusCode","state","message","loadCurrencies","currencies","loadBalances","PlayerName","balances"],"mappings":"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","sourcesContent":["import gameserver from '../apis/gameserver'\n\nexport const saveUser = (username, token) => {\n    return {\n        type : \"SAVE_USER\",\n        payload : {\n            username : username,\n            token : token\n        }\n    }\n}\n\nexport const loadLeaderboards = () => async (dispatch) => {\n    const response = await gameserver.get('/leaderboard')\n    dispatch({\n        type : \"LOAD_LEADERBOARDS\",\n        payload : {\n            leaderboards : response.data.leaderboards\n        }    \n    })    \n}\n\n\nexport const loadLeaderboardData = (leaderboardId) => async (dispatch) =>{\n    console.log(\"action :\"+leaderboardId)\n    const response =  await gameserver.get('/leaderboard/'+leaderboardId)\n    dispatch({\n        type : \"LOAD_LEADERBOARDS_DATA\",\n        payload : {\n            leaderboardsData : response.data,\n            leaderboardId : leaderboardId\n        }    \n    })\n}\n\nexport const updateScore = (leaderboard,player,score,usertoken) => async (dispatch) => {\n    console.log(\"update \",usertoken)\n    \n    const response = await gameserver.post('/leaderboard/'+leaderboard+'/addScore',\n    {\n        name : player,\n        score : score\n    }\n    ,{\n            headers:{ token : usertoken }\n    }\n    )\n\n    if(response != null  && response.data.statusCode == 0){\n        dispatch({\n            type : \"UPDATE_SCORE\",\n            payload : {\n                score : score\n            }\n        })\n    }else if (response != null  && response.data.state == \"Failed\"){\n        dispatch({\n            type : \"SHOW_SCORE_ERROR\",\n            payload : {\n                message:\"error in updating score\"\n            }\n        })\n    }\n    \n}\n\nexport const loadCurrencies  = () => async (dispatch) => {\n    const response = await gameserver.get('/wallet/currencies')\n    console.log(response)\n    dispatch({\n        type : \"LOAD_CURRENCIES\",\n        payload : {\n            currencies : response.data.currencies\n        }\n    })\n}\n\nexport const loadBalances = (username,usertoken) => async (dispatch) => {\n    const response = await gameserver.post('/wallet/balances',{\n        PlayerName : username\n    },\n    {\n        headers:{ token : usertoken }\n    })\n\n    dispatch({\n        type : \"LOAD_BALANCES\",\n        payload : {\n           balances : response.data.balances\n        }\n    })\n\n}"]},"metadata":{},"sourceType":"module"}