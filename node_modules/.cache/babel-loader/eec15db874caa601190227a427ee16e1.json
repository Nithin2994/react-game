{"ast":null,"code":"var _jsxFileName = \"/Users/nithin.reddy/Documents/GitHub/react-game/src/components/tiktoctoe.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { updateScore, endGame } from '../actions/useraction';\nimport histroy from '../history';\nimport { Button, Table, Row, Col, Card, Container } from 'react-bootstrap';\nimport Cell from './cell';\nimport gameserver from '../apis/gameserver';\nimport _ from 'lodash';\n\nclass PVPTikTokToeGame extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      seconds: 60,\n      selectedData: {},\n      myTurn: true\n    };\n\n    this.updateCache = e => {\n      var msg = JSON.parse(e.data);\n      console.log(\"Received \", msg);\n      this.updateGridVals(msg);\n\n      if (!this.state.result) {\n        this.setState({\n          myTurn: true\n        });\n      }\n    };\n\n    this.updateGridVals = msg => {\n      var updatedValues = { ...this.state.selectedData\n      };\n      updatedValues[msg.id] = msg.player;\n      this.setState({\n        selectedData: updatedValues\n      });\n\n      if (this.state.selectedData[1] == this.state.selectedData[2]) {\n        if (this.state.selectedData[2] == this.state.selectedData[3]) {\n          if (this.state.selectedData[1]) {\n            this.setState({\n              result: \"Winner is \" + this.state.selectedData[1],\n              winner: this.state.selectedData[1]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[4] == this.state.selectedData[5]) {\n        if (this.state.selectedData[5] == this.state.selectedData[6]) {\n          if (this.state.selectedData[4]) {\n            this.setState({\n              result: \"Winner is \" + this.state.selectedData[4],\n              winner: this.state.selectedData[4]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[7] == this.state.selectedData[8]) {\n        if (this.state.selectedData[8] == this.state.selectedData[9]) {\n          if (this.state.selectedData[8]) {\n            this.setState({\n              result: \"Winner is \" + this.state.selectedData[8],\n              winner: this.state.selectedData[8]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[1] == this.state.selectedData[5]) {\n        if (this.state.selectedData[5] == this.state.selectedData[9]) {\n          if (this.state.selectedData[5]) {\n            this.setState({\n              result: \"Winner is \" + this.state.selectedData[5],\n              winner: this.state.selectedData[5]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[3] == this.state.selectedData[5]) {\n        if (this.state.selectedData[5] == this.state.selectedData[7]) {\n          if (this.state.selectedData[5]) {\n            this.setState({\n              result: \"Winner is \" + this.state.selectedData[5],\n              winner: this.state.selectedData[5]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[2] == this.state.selectedData[5]) {\n        if (this.state.selectedData[5] == this.state.selectedData[8]) {\n          if (this.state.selectedData[5]) {\n            this.setState({\n              result: \"Winner is \" + this.state.selectedData[5],\n              winner: this.state.selectedData[5]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[1] == this.state.selectedData[4]) {\n        if (this.state.selectedData[4] == this.state.selectedData[7]) {\n          if (this.state.selectedData[4]) {\n            this.setState({\n              result: \"Winner is \" + this.state.selectedData[4],\n              winner: this.state.selectedData[4]\n            });\n          }\n        }\n      }\n\n      if (this.state.selectedData[3] == this.state.selectedData[6]) {\n        if (this.state.selectedData[6] == this.state.selectedData[9]) {\n          if (this.state.selectedData[6]) {\n            this.setState({\n              result: \"Winner is \" + this.state.selectedData[6],\n              winner: this.state.selectedData[6]\n            });\n          }\n        }\n      }\n\n      let count = 0;\n\n      _.forEach(this.state.selectedData, function (value, key) {\n        count++;\n      });\n\n      if (count == 9) {\n        this.setState({\n          result: \"Match is Draw\"\n        });\n      }\n\n      if (this.state.result) {\n        this.endGameHandler();\n        this.setState({\n          myTurn: false\n        });\n      }\n    };\n\n    this.updateBalance = async () => {\n      console.log(this.state.winner);\n      console.log(this.props.username);\n\n      if (this.state.winner == this.props.username) {\n        // let response =  await gameserver.post(\"/wallet/credit\",{\n        //     playerName: this.props.username,\n        //     amount: 100,\n        //     currency: \"gold\"\n        // },{\n        //     headers:{ token : this.props.token }\n        // })\n        let response = await gameserver.post('/leaderboard/Covid/addScore', {\n          name: this.props.username,\n          score: 100\n        }, {\n          headers: {\n            token: this.props.token\n          }\n        });\n        console.log(response);\n      }\n\n      this.props.endGame();\n    };\n\n    this.endGameHandler = () => {\n      this.updateBalance();\n    };\n\n    this.selectCellHandler = async id => {\n      if (this.state.myTurn == true) {\n        console.log(\"Selected : \", id);\n        const response = await gameserver.post(\"/matchmaking/tiktoctoe\", {\n          player: this.props.username,\n          id: id\n        });\n\n        if (response) {\n          this.updateGridVals({\n            player: this.props.username,\n            id: id\n          });\n        }\n\n        this.setState({\n          myTurn: false\n        });\n      }\n    };\n\n    this.renderGameGrid = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }\n      }), [1, 2, 3].map(id => {\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: id,\n          style: {\n            width: \"5%\"\n          },\n          id: id,\n          selected: this.state.selectedData[id],\n          selectCell: this.selectCellHandler,\n          currentPlayer: this.props.username,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 24\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }\n      }), [4, 5, 6].map(id => {\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: id,\n          style: {\n            width: \"5%\"\n          },\n          id: id,\n          selected: this.state.selectedData[id],\n          selectCell: this.selectCellHandler,\n          currentPlayer: this.props.username,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 28\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }\n      }), [7, 8, 9].map(id => {\n        return /*#__PURE__*/React.createElement(Cell, {\n          key: id,\n          style: {\n            width: \"5%\"\n          },\n          id: id,\n          selected: this.state.selectedData[id],\n          selectCell: this.selectCellHandler,\n          currentPlayer: this.props.username,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 28\n          }\n        });\n      }), /*#__PURE__*/React.createElement(Col, {\n        md: 3,\n        lg: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 17\n        }\n      }))));\n    };\n\n    this.renderWinner = () => {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 16\n        }\n      }, this.state.result, \" \");\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          paddingBottom: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        onClick: () => {\n          histroy.push(\"/home\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }\n      }, \"back\")), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        style: {\n          backgroundColor: \"#d6b84d\",\n          border: \"#d6b84d\"\n        },\n        onClick: () => {\n          histroy.push(\"/pvp/tictactoe\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }\n      }, \"New-Match\"))), /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }\n      }, \"Tic Tac Toe ( Opponent : \", this.props.pvp.opponent, \")\"), /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }\n      }, this.state.result ? this.state.result : this.state.myTurn ? \"Your Turn\" : \"Opponent Turn\")), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }\n      }, this.renderGameGrid())));\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.state.myTurn == false && !this.state.result) {\n      setTimeout(() => {\n        this.setState({\n          result: \"Opponent Disconnected\"\n        });\n      }, 20000);\n    }\n  }\n\n  componentDidMount() {\n    this.ws = new WebSocket('ws://3.17.67.172:8081/ws');\n\n    this.ws.onopen = () => this.ws.send(JSON.stringify({\n      gameId: \"TikTocToe\",\n      isJoin: \"true\",\n      Player: this.props.username\n    }));\n\n    this.ws.addEventListener(\"message\", this.updateCache);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.user.username,\n    token: state.user.token,\n    pvp: state.pvp\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateScore,\n  endGame\n})(PVPTikTokToeGame);","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/GitHub/react-game/src/components/tiktoctoe.js"],"names":["React","connect","updateScore","endGame","histroy","Button","Table","Row","Col","Card","Container","Cell","gameserver","_","PVPTikTokToeGame","Component","state","seconds","selectedData","myTurn","updateCache","e","msg","JSON","parse","data","console","log","updateGridVals","result","setState","updatedValues","id","player","winner","count","forEach","value","key","endGameHandler","updateBalance","props","username","response","post","name","score","headers","token","selectCellHandler","renderGameGrid","map","width","renderWinner","render","paddingBottom","backgroundColor","border","push","pvp","opponent","componentDidUpdate","setTimeout","componentDidMount","ws","WebSocket","onopen","send","stringify","gameId","isJoin","Player","addEventListener","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport {updateScore, endGame} from '../actions/useraction'\nimport histroy from '../history'\nimport {Button, Table, Row, Col, Card, Container} from 'react-bootstrap'\nimport Cell from './cell'\nimport gameserver from '../apis/gameserver'\nimport _ from 'lodash';\n\nclass PVPTikTokToeGame extends React.Component{\n\n    state = {\n        seconds : 60,\n        selectedData : {},\n        myTurn : true\n    }\n\n    componentDidUpdate(){\n        if(this.state.myTurn == false && !this.state.result){\n            setTimeout(()=>{\n                this.setState({\n                    result : \"Opponent Disconnected\"\n                })\n            },20000)\n        }\n    }\n\n    componentDidMount(){\n\n        this.ws = new WebSocket('ws://3.17.67.172:8081/ws');\n        this.ws.onopen = () => this.ws.send(JSON.stringify({\n            gameId : \"TikTocToe\",\n            isJoin : \"true\",\n            Player : this.props.username\n        }));\n\n        this.ws.addEventListener(\"message\", this.updateCache)\n\n    }\n\n    updateCache = (e) => {\n        var msg = JSON.parse(e.data);\n        console.log(\"Received \",msg)\n        this.updateGridVals(msg)\n        if(!this.state.result){\n            this.setState({\n                myTurn : true\n            })\n        }\n        \n    }\n\n    updateGridVals = (msg) => {\n        var updatedValues = {...this.state.selectedData}\n        updatedValues[msg.id] = msg.player\n        this.setState({\n            selectedData : updatedValues\n        })\n\n       \n\n        if(this.state.selectedData[1] == this.state.selectedData[2]){\n            if(this.state.selectedData[2] == this.state.selectedData[3]){\n                if(this.state.selectedData[1]){\n                    this.setState({ result : \"Winner is \"+this.state.selectedData[1], winner: this.state.selectedData[1]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[4] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[6]){\n                if(this.state.selectedData[4]){this.setState({result : \"Winner is \"+this.state.selectedData[4], winner: this.state.selectedData[4]})}\n            }\n        }\n\n        if(this.state.selectedData[7] == this.state.selectedData[8]){\n            if(this.state.selectedData[8] == this.state.selectedData[9]){\n                if(this.state.selectedData[8]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[8], winner: this.state.selectedData[8]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[1] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[9]){\n                if(this.state.selectedData[5]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[5], winner: this.state.selectedData[5]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[3] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[7]){\n                if(this.state.selectedData[5]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[5], winner: this.state.selectedData[5]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[2] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[8]){\n                if(this.state.selectedData[5]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[5], winner: this.state.selectedData[5]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[1] == this.state.selectedData[4]){\n            if(this.state.selectedData[4] == this.state.selectedData[7]){\n                if(this.state.selectedData[4]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[4], winner: this.state.selectedData[4]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[3] == this.state.selectedData[6]){\n            if(this.state.selectedData[6] == this.state.selectedData[9]){\n                if(this.state.selectedData[6]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[6], winner: this.state.selectedData[6]})\n                }\n            }\n        }\n\n        let count = 0;\n        _.forEach(this.state.selectedData, function(value, key) {\n            count ++\n        });\n\n        if(count == 9){\n            this.setState({\n                result : \"Match is Draw\"\n            })\n        }\n\n        if(this.state.result){\n            this.endGameHandler()\n            this.setState({\n                myTurn : false\n            })\n            \n        }\n    }\n\n    updateBalance = async () => {\n        console.log(this.state.winner)\n        console.log(this.props.username)\n        if(this.state.winner == this.props.username){\n            // let response =  await gameserver.post(\"/wallet/credit\",{\n            //     playerName: this.props.username,\n            //     amount: 100,\n            //     currency: \"gold\"\n            // },{\n            //     headers:{ token : this.props.token }\n            // })\n\n            let response = await gameserver.post('/leaderboard/Covid/addScore',\n            {\n                name : this.props.username,\n                score : 100\n            }\n            ,{\n                headers:{ token : this.props.token }\n            }\n            )\n            console.log(response)\n        }\n        this.props.endGame()\n    }\n\n    endGameHandler = () =>{\n        this.updateBalance();  \n    }\n\n    selectCellHandler = async (id) =>{\n        if(this.state.myTurn == true){\n            console.log(\"Selected : \",id)\n            const response = await gameserver.post(\"/matchmaking/tiktoctoe\",{\n                player : this.props.username,\n                id:id\n            })\n    \n            if(response){\n                this.updateGridVals({\n                    player : this.props.username,\n                    id : id\n                })\n            }\n\n            this.setState({\n                myTurn : false\n            })\n        }\n    }\n\n    renderGameGrid = () => {\n\n        return <div>\n            <Container>\n            <Row>\n                <Col md={3} lg={3}></Col>\n                \n                {[1,2,3].map((id) =>{\n                return <Cell key={id} style={{width:\"5%\"}} id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler} currentPlayer={this.props.username}/>\n                })}\n                \n                <Col md={3} lg={3}></Col>\n            </Row>\n            <Row>\n                <Col md={3} lg={3}></Col>\n                {[4,5,6].map(id =>{\n                    return <Cell key={id} style={{width:\"5%\"}}  id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler} currentPlayer={this.props.username}/>\n                })}\n                <Col md={3} lg={3}></Col>\n            </Row>\n            <Row>\n                <Col md={3} lg={3}></Col>\n                {[7,8,9].map(id =>{\n                    return <Cell key={id} style={{width:\"5%\"}}  id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler} currentPlayer={this.props.username}/>\n                })}\n                <Col md={3} lg={3}></Col>\n            </Row>\n            </Container>\n        </div>\n    }\n\n    renderWinner = () => {\n        return <h2>{this.state.result} </h2>\n    }\n\n   \n    render = () => {\n        return <div>\n            <Row style={{paddingBottom:\"1%\"}}>\n                <Col>\n                    <Button block style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n                <Col>\n                    <Button block style={{backgroundColor:\"#d6b84d\",border:\"#d6b84d\"}} onClick={()=>{histroy.push(\"/pvp/tictactoe\")}}>New-Match</Button>\n                </Col>\n            </Row>\n            <Card>\n            <Card.Header>\n            <h2>Tic Tac Toe ( Opponent : {this.props.pvp.opponent})</h2>\n            <h3>{this.state.result ? this.state.result : this.state.myTurn ? \"Your Turn\":\"Opponent Turn\"}</h3>\n            </Card.Header>\n            <Card.Body>\n                {this.renderGameGrid()}\n            </Card.Body>\n            </Card>\n        </div>\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        token : state.user.token,\n        pvp : state.pvp\n    }\n}\n\nexport default connect(mapStateToProps,{updateScore,endGame})(PVPTikTokToeGame);"]},"metadata":{},"sourceType":"module"}