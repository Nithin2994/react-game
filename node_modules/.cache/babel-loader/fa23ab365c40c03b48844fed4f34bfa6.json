{"ast":null,"code":"import gameserver from '../apis/gameserver';\nimport history from '../../src/history';\nimport store from '../index';\nexport const saveUser = (username, token) => {\n  history.push(\"/home\");\n  return {\n    type: \"SAVE_USER\",\n    payload: {\n      username: username,\n      token: token\n    }\n  };\n};\nexport const logoutUser = () => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  const response = await gameserver.post(\"/logout\", {}, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n\n  if (response.status == \"Success\") {\n    dispatch({\n      type: \"CLEAR_USER\",\n      payload: {}\n    });\n  }\n};\nexport const loadLeaderboards = () => async dispatch => {\n  const response = await gameserver.get('/leaderboard');\n  dispatch({\n    type: \"LOAD_LEADERBOARDS\",\n    payload: {\n      leaderboards: response.data.leaderboards\n    }\n  });\n};\nexport const loadLeaderboardData = leaderboardId => async dispatch => {\n  console.log(\"action :\" + leaderboardId);\n  const response = await gameserver.get('/leaderboard/' + leaderboardId);\n  dispatch({\n    type: \"LOAD_LEADERBOARDS_DATA\",\n    payload: {\n      leaderboardsData: response.data,\n      leaderboardId: leaderboardId\n    }\n  });\n};\nexport const updateScore = (leaderboard, player, score) => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  console.log(\"sessiontoken \", sessiontoken);\n  const response = await gameserver.post('/leaderboard/' + leaderboard + '/addScore', {\n    name: player,\n    score: score\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n\n  if (response != null && response.data.statusCode == 0) {\n    dispatch({\n      type: \"UPDATE_SCORE\",\n      payload: {\n        score: score\n      }\n    });\n  } else if (response != null && response.data.statusCode == -1) {\n    dispatch({\n      type: \"SHOW_SCORE_ERROR\",\n      payload: {\n        message: \"error in updating score\"\n      }\n    });\n  }\n};\nexport const pollOpponent = () => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  const username = store.getState().user.username;\n  const response = await gameserver.post('matchmaking/pollOpponent', {\n    playerName: username\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n  console.log(response);\n\n  if (response.data.status == \"Success\") {\n    dispatch({\n      type: \"FIND_MATCH\",\n      payload: {\n        status: \"FOUND\",\n        opponentUser: response.data.opponentPlayer,\n        gameId: response.data.gameId\n      }\n    });\n  } else {\n    dispatch({\n      type: \"FIND_MATCH\",\n      payload: {\n        status: \"SEARCHING\",\n        opponentUser: \"\",\n        gameId: \"NA\"\n      }\n    });\n  }\n};\nexport const findOpponent = gameName => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  const username = store.getState().user.username;\n  const response = await gameserver.post('matchmaking/findOpponent', {\n    playerName: username,\n    gameName: gameName\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n  console.log(response);\n\n  if (response.data.status == \"Success\") {\n    dispatch({\n      type: \"FIND_MATCH\",\n      payload: {\n        status: \"FOUND\",\n        opponentUser: response.data.opponentPlayer,\n        gameId: response.data.gameId\n      }\n    });\n  } else {\n    dispatch({\n      type: \"FIND_MATCH\",\n      payload: {\n        status: \"SEARCHING\",\n        opponentUser: \"\",\n        gameId: \"NA\"\n      }\n    });\n  }\n};\nexport const updatePvpScore = score => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  const username = store.getState().user.username;\n  const gameId = store.getState().pvp.gameId;\n  const response = await gameserver.post('matchmaking/updateScore', {\n    playerName: username,\n    gameId: gameId,\n    score: score\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n  console.log(response);\n  dispatch({\n    type: \"UPDATE_PVP_GAME_SCORES\",\n    payload: {\n      scores: response.data.scores\n    }\n  });\n};\nexport const updateScoresInState = scores => {\n  return {\n    type: \"UPDATE_PVP_GAME_SCORES\",\n    payload: {\n      scores: scores\n    }\n  };\n};\nexport const endGame = () => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  const username = store.getState().user.username;\n  const gameId = store.getState().pvp.gameId;\n  const response = await gameserver.post('/matchmaking/endGame', {\n    playerName: username,\n    gameId: gameId\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n  console.log(response);\n\n  if (response.data.status == \"Success\") {\n    dispatch({\n      type: \"END_PVP_GAME\",\n      payload: {\n        winner: response.data.winner\n      }\n    });\n  }\n};\nexport const loadCurrencies = () => async dispatch => {\n  const response = await gameserver.get('/wallet/currencies');\n  console.log(response);\n  dispatch({\n    type: \"LOAD_CURRENCIES\",\n    payload: {\n      currencies: response.data.currencies\n    }\n  });\n};\nexport const loadBalances = (username, usertoken) => async dispatch => {\n  const sessiontoken = store.getState().user.token;\n  console.log(\"sessiontoken \", sessiontoken);\n  const response = await gameserver.post('/wallet/balances', {\n    PlayerName: username\n  }, {\n    headers: {\n      token: sessiontoken\n    }\n  });\n  dispatch({\n    type: \"LOAD_BALANCES\",\n    payload: {\n      balances: response.data.balances\n    }\n  });\n};","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/GitHub/react-game/src/actions/useraction.js"],"names":["gameserver","history","store","saveUser","username","token","push","type","payload","logoutUser","dispatch","sessiontoken","getState","user","response","post","headers","status","loadLeaderboards","get","leaderboards","data","loadLeaderboardData","leaderboardId","console","log","leaderboardsData","updateScore","leaderboard","player","score","name","statusCode","message","pollOpponent","playerName","opponentUser","opponentPlayer","gameId","findOpponent","gameName","updatePvpScore","pvp","scores","updateScoresInState","endGame","winner","loadCurrencies","currencies","loadBalances","usertoken","PlayerName","balances"],"mappings":"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","sourcesContent":["import gameserver from '../apis/gameserver'\nimport history from '../../src/history'\nimport store from '../index'\n\nexport const saveUser = (username, token) => {\n    history.push(\"/home\")\n    return {\n        type : \"SAVE_USER\",\n        payload : {\n            username : username,\n            token : token\n        }\n    }\n}\n\nexport const logoutUser = () => async (dispatch) =>{\n    const sessiontoken = store.getState().user.token\n    const response = await gameserver.post(\"/logout\",{},{\n        headers : { token : sessiontoken }\n    })\n\n    if(response.status == \"Success\"){\n        dispatch({\n            type:\"CLEAR_USER\",\n            payload:{}\n        })\n    }\n}\n\nexport const loadLeaderboards = () => async (dispatch) => {\n    const response = await gameserver.get('/leaderboard')\n    dispatch({\n        type : \"LOAD_LEADERBOARDS\",\n        payload : {\n            leaderboards : response.data.leaderboards\n        }    \n    })    \n}\n\n\nexport const loadLeaderboardData = (leaderboardId) => async (dispatch) =>{\n    console.log(\"action :\"+leaderboardId)\n    const response =  await gameserver.get('/leaderboard/'+leaderboardId)\n    dispatch({\n        type : \"LOAD_LEADERBOARDS_DATA\",\n        payload : {\n            leaderboardsData : response.data,\n            leaderboardId : leaderboardId\n        }    \n    })\n}\n\nexport const updateScore = (leaderboard,player,score) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    console.log(\"sessiontoken \",sessiontoken)\n    const response = await gameserver.post('/leaderboard/'+leaderboard+'/addScore',\n    {\n        name : player,\n        score : score\n    }\n    ,{\n            headers:{ token : sessiontoken }\n    }\n    )\n\n    if(response != null  && response.data.statusCode == 0){\n        dispatch({\n            type : \"UPDATE_SCORE\",\n            payload : {\n                score : score\n            }\n        })\n    }else if (response != null  && response.data.statusCode == -1){\n        dispatch({\n            type : \"SHOW_SCORE_ERROR\",\n            payload : {\n                message:\"error in updating score\"\n            }\n        })\n    }\n    \n}\nexport const pollOpponent = () => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n\n    const response = await gameserver.post('matchmaking/pollOpponent',{\n        playerName : username\n    },{\n        headers : {\n            token : sessiontoken\n        }\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"FOUND\",\n                opponentUser : response.data.opponentPlayer,\n                gameId : response.data.gameId\n            }\n        })\n    }else{\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"SEARCHING\",\n                opponentUser : \"\",\n                gameId:\"NA\"\n            }\n        })\n    }\n}\n\nexport const findOpponent = (gameName) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n    const response = await gameserver.post('matchmaking/findOpponent',{\n        playerName : username,\n        gameName : gameName\n    },{\n        headers : {\n            token : sessiontoken\n        }\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"FOUND\",\n                opponentUser : response.data.opponentPlayer,\n                gameId : response.data.gameId\n            }\n        })\n    }else{\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"SEARCHING\",\n                opponentUser : \"\",\n                gameId : \"NA\"\n            }\n        })\n    }\n    \n}\n\nexport const updatePvpScore = (score) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n    const gameId = store.getState().pvp.gameId\n    const response = await gameserver.post('matchmaking/updateScore',{\n        playerName : username,\n        gameId : gameId,\n        score : score\n    },{\n        headers : { token : sessiontoken}\n    })\n    \n    console.log(response);\n\n    dispatch({\n        type : \"UPDATE_PVP_GAME_SCORES\",\n        payload : {\n            scores : response.data.scores\n        }\n    })\n}\n\nexport const updateScoresInState = (scores) => {\n    return {\n        type : \"UPDATE_PVP_GAME_SCORES\",\n        payload : {\n            scores : scores\n        }\n    }\n}\n\nexport const endGame = () => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n    const gameId = store.getState().pvp.gameId\n\n    const response = await gameserver.post('/matchmaking/endGame',{\n        playerName : username,\n        gameId : gameId\n    },{\n        headers:{token : sessiontoken}\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"END_PVP_GAME\",\n            payload:{\n                winner : response.data.winner\n            }\n        })\n    }\n\n}\n\nexport const loadCurrencies  = () => async (dispatch) => {\n    const response = await gameserver.get('/wallet/currencies')\n    console.log(response)\n    dispatch({\n        type : \"LOAD_CURRENCIES\",\n        payload : {\n            currencies : response.data.currencies\n        }\n    })\n}\n\nexport const loadBalances = (username,usertoken) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    console.log(\"sessiontoken \",sessiontoken)\n    const response = await gameserver.post('/wallet/balances',{\n        PlayerName : username\n    },\n    {\n        headers:{ token : sessiontoken }\n    })\n\n    dispatch({\n        type : \"LOAD_BALANCES\",\n        payload : {\n           balances : response.data.balances\n        }\n    })\n\n}"]},"metadata":{},"sourceType":"module"}