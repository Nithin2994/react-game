{"ast":null,"code":"var _jsxFileName = \"/Users/nithin.reddy/Documents/react/myapp/src/components/tiktoktoe.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { updatePvpScore, endGame, updateScoresInState } from '../actions/useraction';\nimport histroy from '../history';\nimport { Button, Table, Row, Col, Card } from 'react-bootstrap';\nimport Cell from './cell';\n\nclass PVPTikTokToeGame extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      seconds: 60,\n      selectedData: {\n        1: {\n          selected: true,\n          player: \"Nithin1\"\n        },\n        2: {\n          selected: true,\n          player: \"Nithin1\"\n        },\n        3: {\n          selected: true,\n          player: \"Nithin1\"\n        },\n        4: {\n          selected: true,\n          player: \"Nithin1\"\n        },\n        5: {\n          selected: true,\n          player: \"Nithin1\"\n        },\n        6: {\n          selected: true,\n          player: \"Nithin1\"\n        },\n        7: {\n          selected: true,\n          player: \"Nithin1\"\n        },\n        8: {\n          selected: true,\n          player: \"Nithin1\"\n        },\n        9: {\n          selected: true,\n          player: \"Nithin1\"\n        }\n      }\n    };\n\n    this.updateCache = e => {\n      var msg = JSON.parse(e.data);\n      console.log(\"Updated\", msg);\n      this.props.updateScoresInState(msg);\n    };\n\n    this.endGameHandler = () => {\n      this.props.endGame();\n    };\n\n    this.submitHandler = () => {\n      let random = Math.round(Math.random()) * 10 + Math.round(Math.random()) * 20;\n      this.props.updatePvpScore(random);\n    };\n\n    this.renderGameGrid = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }, [1, 2, 3].map(cellId => {\n        /*#__PURE__*/\n        React.createElement(Cell, {\n          id: cellId,\n          selected: this.selectedData[cellId],\n          selectCell: this.selectCell,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 18\n          }\n        });\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, [4, 5, 6].map(id => {\n        /*#__PURE__*/\n        React.createElement(Cell, {\n          id: id,\n          selected: this.selectedData[id],\n          selectCell: this.selectCell,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 18\n          }\n        });\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, [7, 8, 9].map(id => {\n        /*#__PURE__*/\n        React.createElement(Cell, {\n          id: id,\n          selected: this.selectedData[id],\n          selectCell: this.selectCell,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 18\n          }\n        });\n      })));\n    };\n\n    this.selectCell = id => {};\n\n    this.render = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          paddingBottom: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        onClick: () => {\n          histroy.push(\"/home\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }, \"back\"))), /*#__PURE__*/React.createElement(Card, {\n        style: {\n          backgroundColor: \"#24bfb8\",\n          border: \"#24bfb8\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      }, \"TikTokToe\"), /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }, this.renderGameGrid())));\n    };\n  }\n\n  componentDidMount() {\n    this.ws = new WebSocket('ws://localhost:8081/ws');\n\n    this.ws.onopen = () => this.ws.send(JSON.stringify({\n      gameId: this.props.pvp.gameId,\n      isJoin: \"true\",\n      Player: this.props.username\n    }));\n\n    this.ws.addEventListener(\"message\", this.updateCache); // setInterval(\n    //     ()=>{ this.setState({\n    //         seconds : this.state.seconds - 1\n    //     })},1000\n    // )\n    // setTimeout(\n    //     this.endGameHandler, 60000);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    username: state.user.username,\n    pvp: state.pvp,\n    pvpScores: state.pvpScores\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updatePvpScore,\n  endGame,\n  updateScoresInState\n})(PVPTikTokToeGame);","map":{"version":3,"sources":["/Users/nithin.reddy/Documents/react/myapp/src/components/tiktoktoe.js"],"names":["React","connect","updatePvpScore","endGame","updateScoresInState","histroy","Button","Table","Row","Col","Card","Cell","PVPTikTokToeGame","Component","state","seconds","selectedData","selected","player","updateCache","e","msg","JSON","parse","data","console","log","props","endGameHandler","submitHandler","random","Math","round","renderGameGrid","map","cellId","selectCell","id","render","paddingBottom","backgroundColor","border","push","componentDidMount","ws","WebSocket","onopen","send","stringify","gameId","pvp","isJoin","Player","username","addEventListener","mapStateToProps","user","pvpScores"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport {updatePvpScore, endGame, updateScoresInState} from '../actions/useraction'\nimport histroy from '../history'\nimport {Button, Table, Row, Col, Card} from 'react-bootstrap'\nimport Cell from './cell'\n\nclass PVPTikTokToeGame extends React.Component{\n\n    state = {\n        seconds : 60,\n        selectedData : {\n            1 : {\n                selected : true,\n                player : \"Nithin1\"\n            },\n            2 : {\n                selected : true,\n                player : \"Nithin1\"\n            },\n            3 : {\n                selected : true,\n                player : \"Nithin1\"\n            },\n            4 : {\n                selected : true,\n                player : \"Nithin1\"\n            },\n            5 : {\n                selected : true,\n                player : \"Nithin1\"\n            },\n            6 : {\n                selected : true,\n                player : \"Nithin1\"\n            },\n            7 : {\n                selected : true,\n                player : \"Nithin1\"\n            },\n            8 : {\n                selected : true,\n                player : \"Nithin1\"\n            },\n            9 : {\n                selected : true,\n                player : \"Nithin1\"\n            }\n        }}\n\n    \n\n    componentDidMount(){\n\n        this.ws = new WebSocket('ws://localhost:8081/ws');\n        this.ws.onopen = () => this.ws.send(JSON.stringify({\n            gameId : this.props.pvp.gameId,\n            isJoin : \"true\",\n            Player : this.props.username\n        }));\n\n        this.ws.addEventListener(\"message\", this.updateCache)\n\n        // setInterval(\n        //     ()=>{ this.setState({\n        //         seconds : this.state.seconds - 1\n        //     })},1000\n        // )\n        // setTimeout(\n        //     this.endGameHandler, 60000);\n    }\n\n    updateCache = (e) => {\n        var msg = JSON.parse(e.data);\n        console.log(\"Updated\",msg)\n        this.props.updateScoresInState(msg)\n    }\n\n    endGameHandler = () =>{\n        this.props.endGame()\n    }\n\n    submitHandler = () => {\n        let random = (Math.round(Math.random()) * 10) + (Math.round(Math.random()) * 20)\n        this.props.updatePvpScore(random);\n    }\n\n    renderGameGrid = () => {\n\n        return <div>\n        <Row>\n            {\n                [1,2,3].map((cellId) =>{\n                 <Cell id={cellId} selected={this.selectedData[cellId]} selectCell={this.selectCell}/>\n                })\n            }\n            \n        </Row>\n        <Row>\n            {[4,5,6].map(id =>{\n                 <Cell id={id} selected={this.selectedData[id]} selectCell={this.selectCell}/>\n            })}\n        </Row>\n        <Row>\n            {[7,8,9].map(id =>{\n                 <Cell id={id} selected={this.selectedData[id]} selectCell={this.selectCell}/>\n            })}\n        </Row>\n        </div>\n        \n        \n        \n    }\n\n    selectCell = (id) =>{\n\n    }\n\n    render = () => {\n        return <div>\n            <Row style={{paddingBottom:\"1%\"}}>\n                <Col>\n                    <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n            </Row>\n            <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}}>\n            <Card.Header>\n            TikTokToe\n            </Card.Header>\n            <Card.Body>\n                {this.renderGameGrid()}\n            </Card.Body>\n            </Card>\n        </div>\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        pvp : state.pvp,\n        pvpScores : state.pvpScores\n    }\n}\n\nexport default connect(mapStateToProps,{updatePvpScore,endGame,updateScoresInState})(PVPTikTokToeGame);"]},"metadata":{},"sourceType":"module"}