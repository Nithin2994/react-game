{"version":3,"sources":["logo.svg","apis/gameserver.js","history.js","actions/useraction.js","components/leaderboardTable.js","components/leaderboard.js","components/leaderboardDashboard.js","components/googleAuth.js","components/loginFormComponent.js","components/login.js","components/registerFormComponent.js","components/register.js","components/index.js","components/gameFormComponent.js","components/game.js","components/displaywallet.js","components/transactionFormComponent.js","components/transaction.js","components/wallet.js","components/playerLeaderboardTable.js","components/playerLeaderboardView.js","components/playerLeaderboard.js","components/home.js","components/main.js","components/pvpHome.js","components/pvpGame.js","components/cell.js","components/tiktoctoe.js","components/header.js","components/gamesView.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["module","exports","axios","create","baseURL","createHistory","saveUser","username","token","history","push","type","payload","loadLeaderboards","dispatch","a","gameserver","get","response","leaderboards","data","updateScore","leaderboard","player","score","sessiontoken","store","getState","user","console","log","post","name","headers","statusCode","message","endGame","gameId","pvp","playerName","status","winner","loadCurrencies","currencies","loadBalances","usertoken","PlayerName","balances","LeaderboardTable","props","rank","Table","striped","bordered","hover","size","players","map","key","instance","playerScores","LeaderboardView","state","index","handleSelect","selectedIndex","e","setState","this","interval","setInterval","loadLeaderboardData","leaderboardName","Carousel","activeIndex","onSelect","leaderboardsData","lb","subLeaderboards","lbname","Item","details","React","Component","connect","leaderboardId","LeaderboardDashboard","Card","style","backgroundColor","border","text","Header","Body","Row","Col","LoginFormComponent","onSubmit","formValues","onLoginClick","password","input","lable","meta","Form","Group","controlId","Label","Control","autoComplete","Text","touched","error","color","handleSubmit","Field","component","renderInput","Button","block","variant","reduxForm","form","validate","errors","Login","errorMessage","login","match","ownProps","RegisterFormComponent","register","onRegisterClick","email","mobileNo","repassword","Register","Index","Container","GameForm","generateScore","field","as","children","renderSelect","value","GameConatiner","submitHandler","random","Math","round","DisplayWallet","currency","TransactionForm","transact","transaction","amount","Jumbotron","Transaction","parseInt","alert","Wallet","padding","onClick","histroy","renderComponent","PlayerLeaderboardTable","missdleRank","startRank","top","aboveAndBelow","PlayerLeaderboardView","getStartRank","playerLeaderboard","length","getPlayerLeaderboard","scores","playerId","PlayerLeaderboard","Home","logoutUser","MainComponent","params","PVPHome","game","findOpponent","pollOpponent","Spinner","animation","gameName","opponentUser","opponentPlayer","PVPGame","seconds","updateCache","msg","JSON","parse","updateScoresInState","endGameHandler","updatePvpScore","renderGame","paddingBottom","Img","src","Title","pvpScores","opponent","renderWinner","ws","WebSocket","onopen","send","stringify","isJoin","Player","addEventListener","setTimeout","gameStatus","Cell","selected","currentPlayer","width","height","selectCell","id","PVPTikTokToeGame","selectedData","myTurn","updateGridVals","result","updatedValues","count","_","forEach","updateBalance","selectCellHandler","renderGameGrid","md","lg","render","HeaderComponent","GamesView","App","basename","path","exact","extact","pvpGame","PVPTikTocToeGame","Boolean","window","location","hostname","combineReducers","oldUser","action","leaderboardDetails","addLeaderboard","leaderboardDetailsTemp","obj","errorMessageTemp","currenciesTemp","formReducer","pvpNew","pvpScoresNew","oldData","newData","createStore","reducers","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c799ab35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios'\n\nexport default (axios.create({\n        baseURL:\"http://3.17.67.172:8081\"\n    }));","import createHistory from 'history/createHashHistory'\n\nexport default createHistory();","import gameserver from '../apis/gameserver'\nimport history from '../../src/history'\nimport store from '../index'\n\nexport const saveUser = (username, token) => {\n    history.push(\"/home\")\n    return {\n        type : \"SAVE_USER\",\n        payload : {\n            username : username,\n            token : token\n        }\n    }\n}\n\nexport const logoutUser = () => async (dispatch) =>{\n    const sessiontoken = store.getState().user.token\n    const response = await gameserver.post(\"/logout\",{},{\n        headers : { token : sessiontoken }\n    })\n\n    if(response.status == \"Success\"){\n        dispatch({\n            type:\"CLEAR_USER\",\n            payload:{}\n        })\n    }\n}\n\nexport const loadLeaderboards = () => async (dispatch) => {\n    const response = await gameserver.get('/leaderboard')\n    dispatch({\n        type : \"LOAD_LEADERBOARDS\",\n        payload : {\n            leaderboards : response.data.leaderboards\n        }    \n    })    \n}\n\n\nexport const loadLeaderboardData = (leaderboardId) => async (dispatch) =>{\n    console.log(\"action :\"+leaderboardId)\n    const response =  await gameserver.get('/leaderboard/'+leaderboardId)\n    dispatch({\n        type : \"LOAD_LEADERBOARDS_DATA\",\n        payload : {\n            leaderboardsData : response.data,\n            leaderboardId : leaderboardId\n        }    \n    })\n}\n\nexport const getPlayerLeaderboard = (playerId,leaderboard) => async (dispatch) =>{\n    const username = store.getState().user.username\n    const sessiontoken = store.getState().user.token\n    \n    const response =  await gameserver.get('/leaderboard/'+leaderboard+\"/\"+username,{\n        headers : {token : sessiontoken}\n    })\n    dispatch({\n        type : \"LOAD_PLAYER_LEADERBOARDS_DATA\",\n        payload : {\n            rank : response.data.rank,\n            scores : response.data.scores,\n            top : response.data.top,\n            aboveAndBelow : response.data.aboveAndBelow\n        }    \n    })\n}\n\nexport const updateScore = (leaderboard,player,score) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    console.log(\"sessiontoken \",sessiontoken)\n    const response = await gameserver.post('/leaderboard/'+leaderboard+'/addScore',\n    {\n        name : player,\n        score : score\n    }\n    ,{\n            headers:{ token : sessiontoken }\n    }\n    )\n\n    if(response != null  && response.data.statusCode == 0){\n        dispatch({\n            type : \"UPDATE_SCORE\",\n            payload : {\n                score : score\n            }\n        })\n    }else if (response != null  && response.data.statusCode == -1){\n        dispatch({\n            type : \"SHOW_SCORE_ERROR\",\n            payload : {\n                message:\"error in updating score\"\n            }\n        })\n    }\n    \n}\nexport const pollOpponent = () => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n\n    const response = await gameserver.post('matchmaking/pollOpponent',{\n        playerName : username\n    },{\n        headers : {\n            token : sessiontoken\n        }\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"FOUND\",\n                opponentUser : response.data.opponentPlayer,\n                gameId : response.data.gameId\n            }\n        })\n    }else{\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"SEARCHING\",\n                opponentUser : \"\",\n                gameId:\"NA\"\n            }\n        })\n    }\n}\n\nexport const findOpponent = (gameName) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n    const response = await gameserver.post('matchmaking/findOpponent',{\n        playerName : username,\n        gameName : gameName\n    },{\n        headers : {\n            token : sessiontoken\n        }\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"FOUND\",\n                opponentUser : response.data.opponentPlayer,\n                gameId : response.data.gameId\n            }\n        })\n    }else{\n        dispatch({\n            type:\"FIND_MATCH\",\n            payload:{\n                status : \"SEARCHING\",\n                opponentUser : \"\",\n                gameId : \"NA\"\n            }\n        })\n    }\n    \n}\n\nexport const updatePvpScore = (score) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n    const gameId = store.getState().pvp.gameId\n    const response = await gameserver.post('matchmaking/updateScore',{\n        playerName : username,\n        gameId : gameId,\n        score : score\n    },{\n        headers : { token : sessiontoken}\n    })\n    \n    console.log(response);\n\n    dispatch({\n        type : \"UPDATE_PVP_GAME_SCORES\",\n        payload : {\n            scores : response.data.scores\n        }\n    })\n}\n\nexport const updateScoresInState = (scores) => {\n    return {\n        type : \"UPDATE_PVP_GAME_SCORES\",\n        payload : {\n            scores : scores\n        }\n    }\n}\n\nexport const endGame = () => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    const username = store.getState().user.username\n    const gameId = store.getState().pvp.gameId\n\n    const response = await gameserver.post('/matchmaking/endGame',{\n        playerName : username,\n        gameId : gameId\n    },{\n        headers:{token : sessiontoken}\n    })\n\n    console.log(response)\n\n    if(response.data.status == \"Success\"){\n        dispatch({\n            type:\"END_PVP_GAME\",\n            payload:{\n                winner : response.data.winner\n            }\n        })\n    }\n\n}\n\nexport const loadCurrencies  = () => async (dispatch) => {\n    const response = await gameserver.get('/wallet/currencies')\n    console.log(response)\n    dispatch({\n        type : \"LOAD_CURRENCIES\",\n        payload : {\n            currencies : response.data.currencies\n        }\n    })\n}\n\nexport const loadBalances = (username,usertoken) => async (dispatch) => {\n    const sessiontoken = store.getState().user.token\n    console.log(\"sessiontoken \",sessiontoken)\n    const response = await gameserver.post('/wallet/balances',{\n        PlayerName : username\n    },\n    {\n        headers:{ token : sessiontoken }\n    })\n\n    dispatch({\n        type : \"LOAD_BALANCES\",\n        payload : {\n           balances : response.data.balances\n        }\n    })\n\n}","import React from 'react'\nimport {Table,Carousel} from 'react-bootstrap'\n\nconst LeaderboardTable = props =>{\n    var rank =1;\n\n    return <Table striped bordered hover size=\"sm\">\n            <thead><th>Rank</th><th>Player</th><th>Score</th></thead>\n            <tbody>\n            {\n                props.players != null && props.players.map((player)=>{\n                    if(player != null && player != \"\"){\n                    return <tr key={props.instance+\"_\"+player}><td>{rank++}</td><td>{player}</td><td>{props.playerScores[player]}</td></tr>\n                    }\n                    \n                })} \n            </tbody>\n            </Table>\n            \n}\n\nexport default LeaderboardTable","import React from 'react'\nimport {connect} from 'react-redux'\nimport { loadLeaderboardData } from '../actions/useraction'\nimport LeaderboardTable from './leaderboardTable';\nimport {Carousel} from 'react-bootstrap'\n\n\nclass LeaderboardView extends React.Component{\n\n    state = { index : 0}\n    componentDidMount(){\n        this.interval = setInterval(() => this.props.loadLeaderboardData(this.props.leaderboardName), 5000);\n    }\n\n    handleSelect = (selectedIndex, e) => {\n        this.setState({\n            index : selectedIndex\n        })\n      };\n\n    render(){\n        var i =0;\n        return(\n            <div>\n                <h2>{this.props.leaderboardName}</h2>\n            \n            \n            <Carousel activeIndex={this.state.index} onSelect={this.handleSelect}>\n                \n                {\n                (this.props.leaderboardsData != null) &&\n                this.props.leaderboardsData.map((lb) =>{\n                    return  lb.leaderboardName === this.props.leaderboardName && \n                        lb.data.subLeaderboards.map((lbname) =>{\n                            const players = lb.data.players[lbname] ;\n                            return <Carousel.Item>\n                                Hello{lbname}\n                                <LeaderboardTable instance={lbname} players={players} playerScores={lb.data.details}/>\n                                </Carousel.Item>\n                        })\n                    })\n                }\n            </Carousel>\n                </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        leaderboardsData : state.leaderboardsData\n    }\n}\nexport default connect(mapStateToProps,{loadLeaderboardData})(LeaderboardView);","import React from 'react'\nimport LeaderboardView from './leaderboard'\nimport {connect} from 'react-redux'\nimport {loadLeaderboards} from '../actions/useraction'\nimport {Row,Col,Card} from 'react-bootstrap'\n\nclass LeaderboardDashboard extends React.Component{\n\n    componentDidMount(){\n        this.props.loadLeaderboards();\n    }\n\n    render(){\n        return <div>\n            <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} text=\"white\">\n                <Card.Header>\n                    Leaderboards\n                </Card.Header>\n                <Card.Body>\n                <Row>\n                {\n                    (this.props.leaderboards != null) ? \n                        this.props.leaderboards.map((lbname)=>{\n                            return <Col><LeaderboardView leaderboardName={lbname}/></Col>\n                    }) : \"\"\n                }\n                </Row>\n                </Card.Body>\n            </Card>\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        leaderboards : state.leaderboards\n    }\n}\n\nexport default connect(mapStateToProps,{loadLeaderboards})(LeaderboardDashboard)","import React from 'react'\n\nclass GoogleAuth extends React.Component{\n\n    state= {isSignedIn : false}\n    \n    componentDidMount(){\n        window.gapi.load('client:auth2',()=>{\n            window.gapi.client.init({\n                clientId:\"764596879643-u75q1nh2icp4ougd4aqjuqt737a9t8c9.apps.googleusercontent.com\",\n                scope:'email'\n            }).then(() => {\n                this.auth = window.gapi.auth2.getAuthInstance();\n                this.setState({\n                    isSignedIn : this.auth.isSignedIn.get()\n                })\n                this.auth.isSignedIn.listen(this.handleSignInAndOut)\n            });\n        })\n    }\n\n    handleSignInAndOut = () =>{\n        this.setState({\n            isSignedIn : this.auth.isSignedIn.get()\n        })\n    }\n\n    handleSignIn = () => {\n        this.auth.signIn()\n    }\n\n    handleSignOut = () => {\n        this.auth.signOut()\n    }\n\n    render(){\n    return <div><br></br> \n            {\n                this.state.isSignedIn ? \n                <button type=\"button\" onClick={this.handleSignOut}>Google login out</button> : \n                <button type=\"button\" onClick={this.handleSignIn}>Google login</button>\n            }\n        </div>\n    }\n}\n\nexport default GoogleAuth;","import React from 'react'\nimport {Field, reduxForm} from 'redux-form'\nimport { Button, Form } from 'react-bootstrap';\n\nclass LoginFormComponent extends React.Component{\n\n    renderInput({input, lable, meta, type}){\n        //return <input onChange={formProps.input.onChange} value={formProps.input.value} type=\"text\"/>\n        console.log(meta)\n        return (\n                <Form.Group controlId={lable}>\n                    <Form.Label>{lable}</Form.Label>\n                    <Form.Control {...input} autoComplete=\"off\" type={type} />\n                    <Form.Text>\n                    {\n                        meta.touched && meta.error ? <div style={{color:\"red\"}}>{meta.error}</div> : \"\"\n                    }\n                    </Form.Text>\n                </Form.Group>\n            \n        )\n    }\n\n    onSubmit = (formValues) => {\n        this.props.onLoginClick(formValues.username, formValues.password)\n    }\n\n    render(){\n        return <div>\n            <Form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                <Field name=\"username\" component={this.renderInput} lable=\"Username\" type=\"text\"/>\n                <Field name=\"password\" component={this.renderInput} lable=\"Password\" type=\"password\"/>\n                <Button block style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} variant=\"primary\" type=\"submit\">Login</Button>\n            </Form>\n            \n        </div>\n    }\n}\n\nconst validate = formValues =>{\n    const errors={}\n    if(!formValues.username){\n        errors.username = \"Enter username\" \n    }\n    if(!formValues.password){\n        errors.password = \"Enter password\" \n    }\n    return errors;\n}\n\nexport default reduxForm({\n    form : 'FormCreate',\n    validate\n})(LoginFormComponent);\n\n","import React from 'react'\nimport gameserver from '../apis/gameserver'\nimport { saveUser } from '../actions/useraction'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport GoogleAuth from './googleAuth'\nimport LoginFormComponent from './loginFormComponent'\nimport Modal from './modal'\n\nclass Login extends React.Component{\n    \n    state = {errorMessage : \"\"}\n    componentDidMount(){\n        \n        if(this.props.match){\n            console.log(this.props.match)\n        }\n    }\n\n    login = async (username,password) => {\n        \n        let response = await gameserver.post(\"/login\",{\n                playerName:username,\n\t            password:password\n        })\n\n        console.log(response)\n        if(response != null & response.data.status== \"Success\"){\n            this.props.saveUser(username, response.data.token)\n        }else{\n            this.setState({\n                errorMessage : \"Invalid Credentials\"\n            })\n        }\n    }\n\n    render(){\n        return <div>\n            <h2>Login</h2>\n            <LoginFormComponent onLoginClick={this.login}/>\n            <div style={{color:\"red\"}}>{this.state.errorMessage}</div>\n            {/* <GoogleAuth /> */}\n        </div>\n\n    }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    console.log(ownProps)\n    return {\n       \n    };\n}\n\nexport default connect(mapStateToProps,{saveUser})(Login);","import React from 'react'\nimport { Field, reduxForm} from 'redux-form'\nimport { Form, Button} from 'react-bootstrap'\n\nclass RegisterFormComponent extends React.Component{\n\n    renderInput({input, lable, type, meta}){\n        return <Form.Group controlId={lable}>\n                <Form.Label>{lable}</Form.Label>\n                <Form.Control {...input} type={type} />\n                <Form.Text>\n                {\n                    meta.touched && meta.error ? <div style={{color:\"red\"}}>{meta.error}</div> : \"\" \n                }\n                </Form.Text>\n            </Form.Group>\n        \n    }\n\n    register = (formValues) => {\n        this.props.onRegisterClick(formValues.username,formValues.password,formValues.email,formValues.mobileNo);\n    }\n\n    render(){\n        return (\n                <Form onSubmit={this.props.handleSubmit(this.register)}>\n                    <Field name=\"username\" component={this.renderInput} lable=\"Username\" type=\"text\"/>\n                    <Field name=\"password\" component={this.renderInput} lable=\"Password\" type=\"password\"/>\n                    <Field name=\"repassword\" component={this.renderInput} lable=\"Re-Password\" type=\"password\"/>\n                    <Field name=\"email\" component={this.renderInput} lable=\"Email\" type=\"email\"/>\n                    <Field name=\"mobileNo\" component={this.renderInput} lable=\"Mobile No\" type=\"number\"/>\n                    <Button block style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} type=\"submit\" >Register</Button>\n                </Form>\n        )\n    }\n}\n\nconst validate = (formValues) => {\n    const errors= {}\n    if(!formValues.username){\n        errors.username = \"Enter username\"\n    }\n    if(!formValues.password){\n        errors.password = \"Enter password\"\n    }\n    if(!formValues.repassword){\n        errors.repassword = \"Enter valid username\"\n    }\n    if(formValues.password != formValues.repassword) {\n        errors.repassword = \"Not matching with password \"\n    }\n\n    return errors\n}\nexport default reduxForm({\n    form : 'RegisterForm',\n    validate : validate\n})(RegisterFormComponent)","import React from 'react'\nimport gameserver from '../apis/gameserver'\nimport {saveUser} from '../actions/useraction'\nimport {connect} from 'react-redux'\nimport RegisterFormComponent from './registerFormComponent'\n\nclass Register extends React.Component{\n\n    state = {errorMessage : \"\"}\n    register = async (username,password,email,mobileNo) =>{\n        let response = await gameserver.post(\"/register\",{\n                playerName:username,\n                    password:password,\n                    email:email,\n                    mobileNo:mobileNo\n            \n        })\n\n        console.log(response)\n        if(response != null & response.data.status== \"Success\"){\n            this.props.saveUser(username, response.data.token)\n        }else{\n            this.setState({\n                errorMessage : \"Invalid Credentials\"\n            })\n        }\n    }\n\n    render(){\n        return <div>\n            <h2>Register</h2>\n            <RegisterFormComponent onRegisterClick={this.register}/>\n            <div style={{color:\"red\"}}>{this.state.errorMessage}</div>\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return state;\n}\n\nexport default connect(mapStateToProps,{saveUser})(Register)","import React from 'react'\nimport Login from './login'\nimport Register from './register'\nimport {Container,Row,Col} from 'react-bootstrap'\n\nconst Index = (props) =>{\n    return <div>\n        <Container>\n            <Row>\n                <Col><Login /></Col>\n                <Col><Register /></Col>\n            </Row>\n        </Container>\n    </div>\n}\n\nexport default Index","import React from 'react'\nimport {Field, reduxForm} from 'redux-form'\nimport {Form, Button, Table} from 'react-bootstrap'\n\nclass GameForm extends React.Component{\n\n    renderInput({input,type,name,lable,meta}){\n        return <Form.Group>\n            <Form.Label>{lable}</Form.Label>\n            <Form.Control {...input} type={type} name={name}/>\n            <Form.Text>\n            {( meta.touched && meta.error )? <div style={{color:\"red\"}}>{meta.error}</div> : \"\" } \n            </Form.Text>\n        </Form.Group>\n    }\n\n    renderSelect(field){\n        return <Form.Group controlId={field.lable}>\n            <Form.Label>{field.lable}</Form.Label>\n            <Form.Control as=\"select\" {...field.input} name={field.name}>\n                {field.children}\n            </Form.Control>\n            <Form.Text>\n            {( field.meta.error )? <div style={{color:\"red\"}}>{field.meta.error}</div> : \"\" } \n            </Form.Text>\n        </Form.Group>\n    }\n\n    generateScore = (formValues) =>{\n        this.props.generateScore(formValues.leaderboardId)\n    }\n\n    render(){\n        return <div>\n           \n            <Form onSubmit={this.props.handleSubmit(this.generateScore)}>\n                <Field name=\"leaderboardId\" lable=\"LeaderboardId\" component={this.renderSelect}>\n                    <option value=\"NA\">--Select--</option>\n                    {\n                        this.props.leaderboards != null && this.props.leaderboards.map((lb) => {\n                            return <option key={lb}>{lb}</option>\n                        })\n                    }\n            </Field>\n            <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} type=\"submit\">Click here for score</Button>\n            </Form>\n        </div>\n    }\n}\n\nconst validate = (formValues) => {\n    const errors ={}\n    if(!formValues.leaderboardId || formValues.leaderboardId == \"NA\"){\n        errors.leaderboardId = \"Select leaderboard\"\n    }\n    return errors\n}\n\nexport default reduxForm({\n    form : 'Game',\n    validate\n})(GameForm)","import React from 'react'\nimport {connect} from 'react-redux'\nimport { updateScore, loadLeaderboards} from '../actions/useraction'\n\nimport GameForm from './gameFormComponent'\nclass GameConatiner extends React.Component{\n\n    componentDidMount(){\n        this.props.loadLeaderboards();\n    }\n\n    submitHandler = async (leaderboardId) => {\n            let random = (Math.round(Math.random()) * 10) + (Math.round(Math.random()) * 20)\n            this.props.updateScore(leaderboardId,this.props.username,random)\n    }\n\n    render(){\n        return <div>\n            <GameForm leaderboards={this.props.leaderboards} generateScore={this.submitHandler}/>\n            { this.props.errorMessage != \"\" ? this.props.errorMessage : \"\"}\n            Your current game score : {this.props.score}\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        token : state.user.token,\n        leaderboards : state.leaderboards,\n        score : state.score,\n        errorMessage : state.errorMessage\n    }\n}\n\nexport default connect(mapStateToProps,{updateScore,loadLeaderboards})(GameConatiner)","import React from 'react'\nimport {connect} from 'react-redux'\nimport { loadBalances, loadCurrencies } from '../actions/useraction'\nimport {Jumbotron, Table} from 'react-bootstrap'\n\nclass DisplayWallet extends React.Component{\n\n\n    componentDidMount(){\n        this.props.loadBalances(this.props.username,this.props.token)\n        this.props.loadCurrencies()\n    }\n\n    render(){\n        return <div>\n            <h4>Balances</h4>\n            <Table striped bordered hover size=\"sm\">\n                <thead>\n                    <tr><th>Currency</th><th>Balance</th></tr>\n                </thead>\n                <tbody>\n                {\n                this.props.currencies && this.props.currencies.map((currency) =>{\n                     return this.props.balances != null && \n                     <tr>\n                         <td>{currency}</td>\n                         <td>{this.props.balances[currency] ? this.props.balances[currency] : 0}</td>\n                    </tr>\n                }) \n                }\n                </tbody>\n            </Table>\n        </div>\n            \n            \n            \n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        currencies : state.currencies,\n        balances : state.balances,\n        username : state.user.username,\n        token : state.user.token\n    }\n}\n\nexport default connect(mapStateToProps,{loadBalances,loadCurrencies})(DisplayWallet)","import React from 'react'\nimport {Field, reduxForm} from 'redux-form'\nimport {Form, Button, Jumbotron} from 'react-bootstrap'\n\nclass TransactionForm extends React.Component{\n\n    renderInput({input,type,name,lable,meta}){\n        return <Form.Group controlId={lable}>\n            <Form.Label>{lable}</Form.Label>\n            <Form.Control {...input} type={type} name={name}/>\n            <Form.Text>{( meta.touched && meta.error )? <div style={{color:\"red\"}}>{meta.error}</div> : \"\" } </Form.Text>\n        </Form.Group>\n    }\n\n    renderSelect(field){\n        return <Form.Group controlId={field.lable}>\n            <Form.Label>{field.lable}</Form.Label>\n            <Form.Control as=\"select\" {...field.input} name={field.name}>\n                {field.children}\n            </Form.Control>\n            <Form.Text>{( field.meta.error )? <div style={{color:\"red\"}}>{field.meta.error}</div> : \"\" } </Form.Text>\n            </Form.Group>\n    }\n\n    transact = (formValues) => {\n        console.log(formValues)\n        this.props.transaction(formValues.type,formValues.currency,formValues.amount);\n    }\n\n    render(){\n        return <Jumbotron style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}}>\n            <h3>Transaction Form</h3>\n         <Form onSubmit={this.props.handleSubmit(this.transact)}>\n            <Field name=\"amount\" lable=\"Amount\" component={this.renderInput} type=\"number\"></Field>\n            <Field name=\"currency\" lable=\"Currency\" component={this.renderSelect} >\n                <option value=\"NA\">-select-</option>\n                {\n                this.props.currencies != null  && this.props.currencies.map((currency)=>{\n                    return <option value={currency}>{currency}</option>\n                })\n                }\n            </Field>\n            <Field name=\"type\" lable=\"TransactionType\" component={this.renderSelect}>\n                    <option value=\"NA\">-select-</option>\n                    <option value=\"debit\">debit</option>\n                    <option value=\"credit\">credit</option>\n            </Field>\n            <Button variant=\"light\" block type=\"submit\">Submit</Button>\n            </Form>\n            </Jumbotron>\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {}\n\n    if(!formValues.currency){\n        errors.currency = \"Select currency\"\n    }else if(!formValues.type){\n        errors.type = \"Select type\"\n    }else if(!formValues.amount || formValues.amount < 0){\n        errors.amount = \"Enter amount greater than 0\"\n    }\n    return errors\n}\n\nexport default reduxForm({\n    form : 'Transaction',\n    validate\n})(TransactionForm)","import React from 'react'\nimport {connect} from 'react-redux'\nimport {loadCurrencies, loadBalances} from '../actions/useraction'\nimport gameserver from '../apis/gameserver'\nimport TransactionForm from './transactionFormComponent';\n\nclass Transaction extends React.Component{\n\n    state = {\n        status : \"\"\n    }\n\n    componentDidMount(){\n        this.props.loadCurrencies()\n    }\n\n    handleSubmit = async (type,currency,amount) => {\n        if(type != \"NA\" && currency != \"NA\"){\n            const response =  await gameserver.post(\"/wallet/\"+type,{\n                playerName: this.props.username,\n                amount: parseInt(amount),\n                currency: currency\n            },{\n                headers:{\n                    token : this.props.token\n                }\n            })\n    \n            this.setState({\n                status : response.data.status\n            })\n    \n            this.props.loadBalances(this.props.username,this.props.token)\n        }else{\n            alert(\"Select Currency and Type\")\n        }\n        \n    }\n\n    render(){\n        return <div>\n            <TransactionForm currencies={this.props.currencies} transaction={this.handleSubmit}/> \n            {this.state.status}\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        currencies : state.currencies,\n        username : state.user.username,\n        token : state.user.token\n    }\n}\n\nexport default connect(mapStateToProps,{loadCurrencies, loadBalances})(Transaction)","import React from 'react'\nimport DisplayWallet from './displaywallet'\nimport Transaction from './transaction'\nimport {connect} from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport histroy from '../history'\nimport {Button, Row, Col} from 'react-bootstrap'\n\nclass Wallet extends React.Component{\n\n    renderComponent(){\n        return  <div>\n            <Row style={{padding:\"1%\"}}>\n                <Col>\n                    <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <DisplayWallet />\n                </Col>\n            </Row>\n            {/* <Row>\n                <Col>\n                    <Transaction/>\n                </Col>\n            </Row> */}\n            \n            </div>\n    }\n    \n    render(){\n        return <div>\n            {\n                this.props.username ? this.renderComponent() : \"Illegal access to this page\"\n            }\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username\n    }\n}\n\nexport default connect(mapStateToProps)(Wallet)","import React from 'react'\nimport {Table,Carousel} from 'react-bootstrap'\n\nconst PlayerLeaderboardTable = props =>{\n    var rank =1;\n    var missdleRank = props.startRank\n    return <Table striped bordered size=\"sm\">\n            <thead><th>Rank</th><th>Player</th><th>Score</th></thead>\n            <tbody>\n            {\n                props.top != null && props.top.map((player)=>{\n                    if(player != null && player != \"\"){\n                    return <tr key={player}><td>{rank++}</td><td>{player}</td><td>{props.playerScores[player]}</td></tr>\n                    }\n                })} \n                {\n                    (missdleRank > 0 && props.aboveAndBelow != null) && props.aboveAndBelow.map((player)=>{\n                    if(player != null && player != \"\"){\n                    return <tr key={player}><td>{missdleRank++}</td><td>{player}</td><td>{props.playerScores[player]}</td></tr>\n                    }\n                })} \n            </tbody>\n            </Table>\n            \n}\n\nexport default PlayerLeaderboardTable","import React from 'react'\nimport {connect} from 'react-redux'\nimport { getPlayerLeaderboard } from '../actions/useraction'\nimport LeaderboardTable from './leaderboardTable';\nimport {Carousel} from 'react-bootstrap'\nimport PlayerLeaderboardTable from './playerLeaderboardTable'\n\n\nclass PlayerLeaderboardView extends React.Component{\n\n    state = { index : 0}\n    componentDidMount(){\n        console.log(\"username : \",this.props.username)\n        this.props.getPlayerLeaderboard(this.props.username,this.props.leaderboardName)\n        this.interval = setInterval(() => this.props.getPlayerLeaderboard(this.props.username,this.props.leaderboardName), 5000);\n    }\n\n    getStartRank = () =>{\n        if(this.props.playerLeaderboard && this.props.playerLeaderboard.aboveAndBelow){\n            return this.props.playerLeaderboard.rank - (this.props.playerLeaderboard.aboveAndBelow.length / 2 )\n        }\n        return 0\n    }\n\n    render(){\n        var i =0;\n        return(\n            <div>\n                <h4>{this.props.leaderboardName}</h4>\n            \n                <PlayerLeaderboardTable \n                    top={this.props.playerLeaderboard && this.props.playerLeaderboard.top}\n                    aboveAndBelow = {this.props.playerLeaderboard && this.props.playerLeaderboard.aboveAndBelow}\n                    playerScores = {this.props.playerLeaderboard && this.props.playerLeaderboard.scores}\n                    startRank = {this.getStartRank()}/>\n            \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        playerLeaderboard : state.playerLeaderboard,\n    }\n}\nexport default connect(mapStateToProps,{getPlayerLeaderboard})(PlayerLeaderboardView);","import React from 'react'\nimport {connect} from 'react-redux'\nimport {loadLeaderboards} from '../actions/useraction'\nimport PlayerLeaderboardView from './playerLeaderboardView'\nimport {Card,Row,Col} from 'react-bootstrap'\n\nclass PlayerLeaderboard extends React.Component{\n\n    componentDidMount(){\n        this.props.loadLeaderboards()\n    }\n\n    render(){\n        return <div>\n            <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} text=\"white\">\n                <Card.Header>\n                    Leaderboards\n                </Card.Header>\n                <Card.Body>\n                <Row>\n                {\n                    (this.props.leaderboards != null) ? \n                        this.props.leaderboards.map((lbname)=>{\n                            return <Col><PlayerLeaderboardView leaderboardName={lbname}/></Col>\n                    }) : \"\"\n                }\n                </Row>\n                </Card.Body>\n            </Card>\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        leaderboards : state.leaderboards\n    }\n}\n\nexport default connect(mapStateToProps,{loadLeaderboards})(PlayerLeaderboard)","import React from 'react'\nimport LeaderboardDashboard from './leaderboardDashboard'\nimport GameConatiner from './game'\nimport { connect } from 'react-redux'\nimport Wallet from './wallet'\nimport { Link } from 'react-router-dom'\nimport histroy from '../history'\nimport {Button,Row,Col} from 'react-bootstrap'\nimport {logoutUser} from '../actions/useraction'\nimport PlayerLeaderboard from './playerLeaderboard'\n\nclass Home extends React.Component{\n\n    render(){\n        return <div>\n            <Row>\n                <Col>\n                    <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} block onClick={()=>{histroy.push(\"/wallet\")}}>Wallet</Button>\n                </Col>\n                <Col>\n                    <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} block onClick={()=>{histroy.push(\"/games\")}}>Games</Button>\n                </Col>\n                <Col>\n                    <Button style={{backgroundColor:\"#d94545\",border:\"#d94545\"}} block onClick={()=>{ this.props.logoutUser() ; histroy.push(\"/login\")}}>Logout</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <h2>Welcome {this.props.username}</h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <GameConatiner username={this.props.username}/>\n                </Col>\n            </Row>\n           \n            {/* <LeaderboardDashboard username={this.props.username}/> */}\n            <PlayerLeaderboard />\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username\n    }\n}\n\nexport default connect(mapStateToProps,{logoutUser})(Home)","import React from 'react'\nimport {connect} from 'react-redux'\nimport Home from './home'\nimport Index from './index'\nimport Modal from './modal'\n\nclass MainComponent extends React.Component{\n    componentDidMount(){\n        if(this.props.match.params){\n            console.log(this.props.match.params)\n        }\n    }\n    renderComponent = () => {\n        return <Index/>\n    }\n\n    render(){\n        return (\n            <div>\n                {/* <Modal /> */}\n                {this.renderComponent()}\n            </div>\n        )\n    }\n}\n\nconst mapStateFromProps = (state) => {\n    return {\n        username : state.user.username\n    }\n}\n\nexport default connect(mapStateFromProps)(MainComponent)","import React from 'react'\nimport {connect} from 'react-redux'\nimport { findOpponent, pollOpponent } from '../actions/useraction'\nimport histroy from '../history'\nimport {Spinner, Button, Row, Col, Card} from 'react-bootstrap'\n\nclass PVPHome extends React.Component{\n\n    state = {\n        game : \"\"\n    }\n\n    componentDidMount(){\n        if(this.props.match){\n            this.props.findOpponent(this.props.match.params.game);\n        }   \n    }\n\n    componentDidUpdate(){\n        if(this.props.pvp.status != \"FOUND\"){\n            this.props.pollOpponent();\n        }else{\n            // histroy.push(\"/game/\"+this.props.pvp.gameId)\n            if(this.props.match){\n                console.log(this.props.match)\n                histroy.push(\"/\"+this.props.match.params.game)\n            }\n            \n        }\n    }\n\n    render(){\n        return <div>\n             <Row>\n                <Col>\n                    <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n            </Row>\n            <Card>\n            <Card.Header style={{color:\"white\",backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}}>\n            <h1>Finding Opponent ...</h1>\n            </Card.Header>\n            <Card.Body>\n            <Spinner size=\"lg\" animation=\"border\" />\n            </Card.Body>\n            </Card>\n\n            </div>\n            \n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        pvp : state.pvp\n    }\n}\n\nexport default connect(mapStateToProps,{findOpponent,pollOpponent})(PVPHome);","import React from 'react'\nimport {connect} from 'react-redux'\nimport {updatePvpScore, endGame, updateScoresInState} from '../actions/useraction'\nimport histroy from '../history'\nimport {Button, Jumbotron, Row, Col, Card} from 'react-bootstrap'\n\nclass PVPGame extends React.Component{\n\n    state = {seconds : 20}\n\n    componentDidMount(){\n\n        this.ws = new WebSocket('ws://3.17.67.172:8081/ws');\n        this.ws.onopen = () => this.ws.send(JSON.stringify({\n            gameId : this.props.pvp.gameId,\n            isJoin : \"true\",\n            Player : this.props.username\n        }));\n\n        this.ws.addEventListener(\"message\", this.updateCache)\n\n        setInterval(\n            ()=>{ this.setState({\n                seconds : this.state.seconds - 1\n            })},1000\n        )\n        setTimeout(\n            this.endGameHandler, 20000);\n    }\n\n    updateCache = (e) => {\n        var msg = JSON.parse(e.data);\n        console.log(\"Updated\",msg)\n        this.props.updateScoresInState(msg)\n    }\n\n    endGameHandler = () =>{\n        this.props.endGame()\n    }\n\n    submitHandler = () => {\n        let random = (Math.round(Math.random()) * 10) + (Math.round(Math.random()) * 20)\n        this.props.updatePvpScore(random);\n    }\n\n\n    renderGame = () => {\n        return <div>\n            <Row style={{paddingBottom:\"1%\"}}>\n                <Col>\n                    <Button block style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n                <Col>\n                    <Button block style={{backgroundColor:\"#d6b84d\",border:\"#d6b84d\"}} onClick={()=>{histroy.push(\"/pvp/highscore\")}}>New-Match</Button>\n                </Col>\n            </Row>\n            \n            <Card>\n            <Card.Header style={{color:\"white\",backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}}>\n            <h4>Game Id : {this.props.pvp.gameId}</h4>\n                        <h4>Time : {this.state.seconds}</h4>\n            </Card.Header>\n            <Card.Body>\n            <Row>\n                <Col>\n                <Card>\n                    <Card.Img variant=\"top\" src=\"https://github.com/Nithin2994/react-game/blob/gh-pages/images/user.png?raw=true\" />\n                    <Card.Body>\n                        <Card.Title>{this.props.username}</Card.Title>\n                        <Card.Text><h2>Score  {this.props.pvpScores[this.props.username]}</h2></Card.Text>\n                        <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}}  onClick={this.submitHandler} >Play</Button>\n                    </Card.Body>\n                </Card>\n                </Col>\n                <Col>\n                <Card>\n                    <Card.Img variant=\"top\" src=\"/images/user.png\" />\n                    <Card.Body>\n                        <Card.Title>{this.props.pvp.opponent}</Card.Title>\n                        <Card.Text><h2>Score  {this.props.pvpScores[this.props.pvp.opponent]}</h2></Card.Text>\n                        {/* <Button variant=\"primary\" onClick={this.submitHandler} >Play</Button> */}\n                    </Card.Body>\n                </Card>\n                </Col>\n            </Row>\n            </Card.Body>\n    </Card>\n\n            \n    </div>\n    }\n\n    renderWinner = () => {\n        return <div>\n            <Row style={{paddingBottom:\"1%\"}}>\n                <Col>\n                    <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n            </Row>\n            <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}}>\n            <Card.Header>\n            <h2>Congratulations {this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.opponent : this.props.username}  </h2>\n            </Card.Header>\n            <Card.Body>\n                <Row>\n                    <Col>\n                    <Card.Img variant=\"top\" src=\"/images/user.png\" />\n                    </Col>\n                    <Col>\n                    <Row style={{padding:\"1%\"}}>\n                        <Col>\n                        <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} text=\"white\">\n                        <Card.Header>\n                        SCORE\n                        </Card.Header>\n                        <Card.Body>\n                        <h2>{this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username]}</h2>\n                        </Card.Body>\n                        </Card>\n                        </Col>\n                    </Row>\n                    <Row style={{padding:\"1%\"}}>\n                        <Col>\n                        <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} text=\"white\">\n                        <Card.Header>\n                        LEVEL\n                        </Card.Header>\n                        <Card.Body>\n                        <h2>{this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username]}</h2>\n                        </Card.Body>\n                        </Card>\n                        </Col>\n                    </Row>\n                    <Row style={{padding:\"1%\"}}>\n                        <Col>\n                        <Card style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} text=\"white\">\n                        <Card.Header>\n                        REWARDS\n                        </Card.Header>\n                        <Card.Body>\n                        <h2>{this.props.pvp.winner[this.props.pvp.opponent] ? this.props.pvp.winner[this.props.pvp.opponent] : this.props.pvp.winner[this.props.username]}</h2>\n                        </Card.Body>\n                        </Card>\n                        </Col>\n                    </Row>\n                    </Col>\n                </Row>\n    \n            </Card.Body>\n            </Card>\n        </div>\n    }\n\n    render(){\n        return <div>\n            {this.props.pvp && this.props.pvp.gameStatus != \"Finished\" ? this.renderGame() : this.renderWinner()}\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        pvp : state.pvp,\n        pvpScores : state.pvpScores\n    }\n}\n\nexport default connect(mapStateToProps,{updatePvpScore,endGame,updateScoresInState})(PVPGame);","import React from 'react'\nimport {Col,Button} from 'react-bootstrap'\n\nconst Cell = (props) => {\n    return <Col>\n    \n    {props.selected ? \n            props.currentPlayer == props.selected ? <img width=\"100%\" height=\"100%\" src=\"https://github.com/Nithin2994/react-game/blob/gh-pages/images/O.png?raw=true\"/> : <img width=\"100%\" height=\"100%\"  src=\"https://github.com/Nithin2994/react-game/blob/gh-pages/images/X.png?raw=true\"/> : \n            <img onClick={()=>{props.selectCell(props.id)}} width=\"100%\" height=\"100%\" src=\"https://github.com/Nithin2994/react-game/blob/gh-pages/images/click.png?raw=true\"/>}\n    \n        \n    </Col>\n}\n\nexport default Cell;","import React from 'react'\nimport {connect} from 'react-redux'\nimport {updateScore, endGame} from '../actions/useraction'\nimport histroy from '../history'\nimport {Button, Table, Row, Col, Card, Container} from 'react-bootstrap'\nimport Cell from './cell'\nimport gameserver from '../apis/gameserver'\nimport _ from 'lodash';\n\nclass PVPTikTokToeGame extends React.Component{\n\n    state = {\n        seconds : 60,\n        selectedData : {},\n        myTurn : true\n    }\n\n    componentDidUpdate(){\n        if(this.state.myTurn == false && !this.state.result){\n            setTimeout(()=>{\n                this.setState({\n                    result : \"Opponent Disconnected\"\n                })\n            },20000)\n        }\n    }\n\n    componentDidMount(){\n\n        this.ws = new WebSocket('ws://3.17.67.172:8081/ws');\n        this.ws.onopen = () => this.ws.send(JSON.stringify({\n            gameId : \"TikTocToe\",\n            isJoin : \"true\",\n            Player : this.props.username\n        }));\n\n        this.ws.addEventListener(\"message\", this.updateCache)\n\n    }\n\n    updateCache = (e) => {\n        var msg = JSON.parse(e.data);\n        console.log(\"Received \",msg)\n        this.updateGridVals(msg)\n        if(!this.state.result){\n            this.setState({\n                myTurn : true\n            })\n        }\n        \n    }\n\n    updateGridVals = (msg) => {\n        var updatedValues = {...this.state.selectedData}\n        updatedValues[msg.id] = msg.player\n        this.setState({\n            selectedData : updatedValues\n        })\n\n       \n\n        if(this.state.selectedData[1] == this.state.selectedData[2]){\n            if(this.state.selectedData[2] == this.state.selectedData[3]){\n                if(this.state.selectedData[1]){\n                    this.setState({ result : \"Winner is \"+this.state.selectedData[1], winner: this.state.selectedData[1]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[4] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[6]){\n                if(this.state.selectedData[4]){this.setState({result : \"Winner is \"+this.state.selectedData[4], winner: this.state.selectedData[4]})}\n            }\n        }\n\n        if(this.state.selectedData[7] == this.state.selectedData[8]){\n            if(this.state.selectedData[8] == this.state.selectedData[9]){\n                if(this.state.selectedData[8]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[8], winner: this.state.selectedData[8]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[1] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[9]){\n                if(this.state.selectedData[5]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[5], winner: this.state.selectedData[5]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[3] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[7]){\n                if(this.state.selectedData[5]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[5], winner: this.state.selectedData[5]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[2] == this.state.selectedData[5]){\n            if(this.state.selectedData[5] == this.state.selectedData[8]){\n                if(this.state.selectedData[5]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[5], winner: this.state.selectedData[5]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[1] == this.state.selectedData[4]){\n            if(this.state.selectedData[4] == this.state.selectedData[7]){\n                if(this.state.selectedData[4]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[4], winner: this.state.selectedData[4]})\n                }\n            }\n        }\n\n        if(this.state.selectedData[3] == this.state.selectedData[6]){\n            if(this.state.selectedData[6] == this.state.selectedData[9]){\n                if(this.state.selectedData[6]){\n                    this.setState({result : \"Winner is \"+this.state.selectedData[6], winner: this.state.selectedData[6]})\n                }\n            }\n        }\n\n        let count = 0;\n        _.forEach(this.state.selectedData, function(value, key) {\n            count ++\n        });\n\n        if(count == 9){\n            this.setState({\n                result : \"Match is Draw\"\n            })\n        }\n\n        if(this.state.result){\n            this.endGameHandler()\n            this.setState({\n                myTurn : false\n            })\n            \n        }\n    }\n\n    updateBalance = async () => {\n        console.log(this.state.winner)\n        console.log(this.props.username)\n        if(this.state.winner == this.props.username){\n            // let response =  await gameserver.post(\"/wallet/credit\",{\n            //     playerName: this.props.username,\n            //     amount: 100,\n            //     currency: \"gold\"\n            // },{\n            //     headers:{ token : this.props.token }\n            // })\n\n            let response = await gameserver.post('/leaderboard/Covid/addScore',\n            {\n                name : this.props.username,\n                score : 100\n            }\n            ,{\n                headers:{ token : this.props.token }\n            }\n            )\n            console.log(response)\n        }\n        this.props.endGame()\n    }\n\n    endGameHandler = () =>{\n        this.updateBalance();  \n    }\n\n    selectCellHandler = async (id) =>{\n        if(this.state.myTurn == true){\n            console.log(\"Selected : \",id)\n            const response = await gameserver.post(\"/matchmaking/tiktoctoe\",{\n                player : this.props.username,\n                id:id\n            })\n    \n            if(response){\n                this.updateGridVals({\n                    player : this.props.username,\n                    id : id\n                })\n            }\n\n            this.setState({\n                myTurn : false\n            })\n        }\n    }\n\n    renderGameGrid = () => {\n\n        return <div>\n            <Container>\n            <Row>\n                <Col md={3} lg={3}></Col>\n                \n                {[1,2,3].map((id) =>{\n                return <Cell key={id} style={{width:\"5%\"}} id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler} currentPlayer={this.props.username}/>\n                })}\n                \n                <Col md={3} lg={3}></Col>\n            </Row>\n            <Row>\n                <Col md={3} lg={3}></Col>\n                {[4,5,6].map(id =>{\n                    return <Cell key={id} style={{width:\"5%\"}}  id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler} currentPlayer={this.props.username}/>\n                })}\n                <Col md={3} lg={3}></Col>\n            </Row>\n            <Row>\n                <Col md={3} lg={3}></Col>\n                {[7,8,9].map(id =>{\n                    return <Cell key={id} style={{width:\"5%\"}}  id={id} selected={this.state.selectedData[id]} selectCell={this.selectCellHandler} currentPlayer={this.props.username}/>\n                })}\n                <Col md={3} lg={3}></Col>\n            </Row>\n            </Container>\n        </div>\n    }\n\n    renderWinner = () => {\n        return <h2>{this.state.result} </h2>\n    }\n\n   \n    render = () => {\n        return <div>\n            <Row style={{paddingBottom:\"1%\"}}>\n                <Col>\n                    <Button block style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n                <Col>\n                    <Button block style={{backgroundColor:\"#d6b84d\",border:\"#d6b84d\"}} onClick={()=>{histroy.push(\"/pvp/tictactoe\")}}>New-Match</Button>\n                </Col>\n            </Row>\n            <Card>\n            <Card.Header>\n            <h2>Tic Tac Toe ( Opponent : {this.props.pvp.opponent})</h2>\n            <h3>{this.state.result ? this.state.result : this.state.myTurn ? \"Your Turn\":\"Opponent Turn\"}</h3>\n            </Card.Header>\n            <Card.Body>\n                {this.renderGameGrid()}\n            </Card.Body>\n            </Card>\n        </div>\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username : state.user.username,\n        token : state.user.token,\n        pvp : state.pvp\n    }\n}\n\nexport default connect(mapStateToProps,{updateScore,endGame})(PVPTikTokToeGame);","import React from 'react'\nimport { Jumbotron} from 'react-bootstrap'\n\nconst HeaderComponent = () => {\n    return <Jumbotron style={{backgroundColor: \"#24bfb8\"}}>\n        <center><h1> My Game </h1></center>\n    </Jumbotron>\n        \n}\n\nexport default HeaderComponent","import React from 'react'\nimport {Container, Button, Row, Col} from 'react-bootstrap'\nimport histroy from '../history'\n\nclass GamesView extends React.Component{\n\n    render(){\n        return <Container>\n            <Row>\n                <Col>\n                    <Button style={{backgroundColor:\"#24bfb8\",border:\"#24bfb8\"}} onClick={()=>{histroy.push(\"/home\")}}>back</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <img width=\"100%\" height=\"100%\"  src=\"https://github.com/Nithin2994/react-game/blob/gh-pages/images/highscore.jpeg?raw=true\" onClick={()=>{histroy.push(\"/pvp/highscore\")}} />\n                </Col>\n                <Col>\n                    <img width=\"100%\" height=\"100%\"  src=\"https://github.com/Nithin2994/react-game/blob/gh-pages/images/tictoctoe.png?raw=true\" onClick={()=>{histroy.push(\"/pvp/tictactoe\")}} />\n                </Col>\n            </Row>\n        </Container>\n    }\n}\n\nexport default GamesView","import React from 'react';\nimport { Router, Route, Switch, HashRouter} from 'react-router-dom'\nimport logo from './logo.svg';\nimport './App.css';\nimport LeaderboardView from './components/leaderboard';\nimport LeaderboardDashboard from './components/leaderboardDashboard';\nimport Login from './components/login';\nimport Register from './components/register';\nimport Index from './components';\nimport Home from './components/home';\nimport Wallet from './components/wallet';\nimport MainComponent from './components/main'\nimport history from './history'\nimport PVPHome from './components/pvpHome';\nimport pvpGame from './components/pvpGame';\nimport PVPTikTocToeGame from './components/tiktoctoe';\nimport {Container} from 'react-bootstrap';\nimport HeaderComponent from './components/header';\nimport GamesView from './components/gamesView';\n\n\n\nfunction App() {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL+\"/\"} history={history}>\n      <HeaderComponent />\n      <Container>\n       <Switch>\n        <Route path=\"/login\" component={Login} />  \n        <Route path=\"/register\" component={Register} />  \n        <Route path=\"/logintest/:type\" exact component={MainComponent} />\n        <Route path=\"/home\" extact component={Home} />\n        <Route path=\"/wallet\" extact component={Wallet} />\n        <Route path=\"/pvp/:game\" extact component={PVPHome} />\n        <Route path=\"/highscore\" extact component={pvpGame} />\n        <Route path=\"/tictactoe\" extact component={PVPTikTocToeGame} />\n        <Route path=\"/games\" extact component={GamesView} />\n       </Switch>\n      </Container>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux'\nimport {reducer as formReducer} from 'redux-form'\n\nconst usersReducer = (oldUser = { username :\"\", token:\"\" }, action) => {\n    if(action.type == \"SAVE_USER\"){\n        console.log(\"userreducer\",action)\n        return {\n            username : action.payload.username,\n            token: action.payload.token\n        }\n    }\n\n    if(action.type == \"CLEAR_USER\"){\n        return {}\n    }\n\n    return oldUser\n}\n\n\nconst leaderboardsReducers = (leaderboards=[], action) => {\n    if(action.type == \"LOAD_LEADERBOARDS\"){\n        return action.payload.leaderboards\n    }\n\n    return leaderboards;\n}\n\nconst leaderboardsDataReducers = (leaderboardDetails =[], action) => {\n    let addLeaderboard = true;\n    if(action.type == \"LOAD_LEADERBOARDS_DATA\"){\n        let leaderboardDetailsTemp = []\n        if(leaderboardDetails.length > 0){\n            leaderboardDetails.map((leaderboard)=>{\n                if(leaderboard.leaderboardName === action.payload.leaderboardId ){\n                    console.log(\"update data\")\n                    addLeaderboard= false;\n                    leaderboard.data = action.payload.leaderboardsData;\n                }\n                leaderboardDetailsTemp = [... leaderboardDetailsTemp, leaderboard]\n                \n            })\n        }\n        if(addLeaderboard){\n            let obj = {\n                leaderboardName : action.payload.leaderboardId,\n                data : action.payload.leaderboardsData\n            }\n            leaderboardDetailsTemp = [... leaderboardDetailsTemp, obj]\n        }\n        \n        \n        \n        return leaderboardDetailsTemp\n    }\n\n    return leaderboardDetails;\n}\n\nconst updateScore = (score=0, action) => {\n    if(action.type == \"UPDATE_SCORE\"){\n        console.log(\"update\",action.payload.score)\n        return action.payload.score\n    }\n    return score\n\n}\n\nconst showError = ( errorMessage = \"\", action) => {\n    if(action.type == \"SHOW_SCORE_ERROR\"){\n        let errorMessageTemp = action.payload.message\n        return errorMessageTemp\n    }\n    return errorMessage;\n}\n\nconst loadcurrencies = ( currencies=[], action) => {\n    if(action.type == \"LOAD_CURRENCIES\"){\n        let currenciesTemp = action.payload.currencies\n        return currenciesTemp\n    }\n\n    return currencies;\n}\n\nconst loadBalances = (balances=[], action) => {\n    if(action.type == \"LOAD_BALANCES\"){\n        let balances = action.payload.balances\n        return balances\n    }\n\n    return balances\n}\n\nconst findMatch = (pvp = {}, action) => {\n    if(action.type == \"FIND_MATCH\"){\n        console.log(action.payload)\n        let pvpNew = {}\n        pvpNew.status = action.payload.status\n        pvpNew.opponent = action.payload.opponentUser\n        pvpNew.gameId = action.payload.gameId\n        pvpNew.gameStatus = \"Begin\"\n        return pvpNew\n    }\n\n    if(action.type == \"END_PVP_GAME\"){\n        let pvpNew = {...pvp}\n        pvpNew.gameStatus = \"Finished\"\n        pvpNew.winner = action.payload.winner\n        return pvpNew\n    }\n\n    return pvp\n}\n\nconst updateScoresInPvp = (pvpScores={}, action) => {\n    if(action.type == \"UPDATE_PVP_GAME_SCORES\"){\n        console.log(\"updating cache \",action.payload.scores)\n        let pvpScoresNew = action.payload.scores\n        return pvpScoresNew;\n    }\n\n    if(action.type == \"FIND_MATCH\"){\n        return {}\n    }\n\n    return pvpScores\n}\n\nconst playerLeaderboardData = (oldData = {}, action) => {\n    console.log(\"solver \",action.payload)\n    if(action.type == \"LOAD_PLAYER_LEADERBOARDS_DATA\"){\n        let newData = {};\n        newData.rank = action.payload.rank\n        newData.top = action.payload.top\n        newData.aboveAndBelow = action.payload.aboveAndBelow\n        newData.scores = action.payload.scores\n        return newData\n    }\n    return oldData;\n}\n\nexport default combineReducers({\n    user: usersReducer,\n    leaderboards : leaderboardsReducers,\n    leaderboardsData : leaderboardsDataReducers,\n    score : updateScore,\n    errorMessage : showError,\n    currencies : loadcurrencies,\n    balances : loadBalances,\n    form : formReducer,\n    pvp : findMatch,\n    pvpScores : updateScoresInPvp,\n    playerLeaderboard : playerLeaderboardData\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\n\nimport reducers from './reducers'\nimport  thunk  from 'redux-thunk'\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport default store;"],"sourceRoot":""}